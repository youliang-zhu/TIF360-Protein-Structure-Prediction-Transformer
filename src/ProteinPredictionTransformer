{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","mount_file_id":"1QaZXkEplYvCkenNGRui4MyC1E72KVE7V","authorship_tag":"ABX9TyOS5QoiIIui3k+JjJRD0eIH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.manifold import MDS\n","import pickle\n","from mpl_toolkits.mplot3d import Axes3D\n","\n","import os\n","import math\n","import time\n","import random\n","\n","import torch\n","import torch.nn as nn\n","from torch.utils.data import DataLoader, TensorDataset, Dataset\n","import torch.optim as optim\n","from torch.nn.utils.rnn import pad_sequence\n","import torch.nn.functional as F\n","\n","from tqdm import tqdm\n","import matplotlib.pyplot as plt\n","from collections import defaultdict\n","\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"],"metadata":{"id":"Cp-lmcFNYTE9","executionInfo":{"status":"ok","timestamp":1748797459433,"user_tz":-120,"elapsed":11223,"user":{"displayName":"Youliang","userId":"05608918674526622561"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KdQVIavwhnYs","executionInfo":{"status":"ok","timestamp":1748797617781,"user_tz":-120,"elapsed":27527,"user":{"displayName":"Youliang","userId":"05608918674526622561"}},"outputId":"b7caf825-f50f-4165-afd5-966bb5ec512b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Number of training set samples: 2770, number of test set samples: 693\n","Standardization parameters: mean = 29.5949, std = 15.2964\n"]}],"source":["# ------------------------- Load Preprocessed Data -------------------------\n","processed_path = '/content/drive/MyDrive/ProteinData/immunoglobulin_processed/'\n","all_sequences = []\n","all_distance_matrices = []\n","\n","# Loading training data\n","train_data = np.load(os.path.join(processed_path, 'train_data.npz'), allow_pickle=True)\n","train_sequences = train_data['sequences']\n","train_matrices = train_data['matrices']\n","\n","# Loading test data\n","test_data = np.load(os.path.join(processed_path, 'test_data.npz'), allow_pickle=True)\n","test_sequences = test_data['sequences']\n","test_matrices = test_data['matrices']\n","\n","# Loading standardized statistics\n","with open(os.path.join(processed_path, 'global_stats.pkl'), 'rb') as f:\n","    global_stats = pickle.load(f)\n","\n","train_global_mean = global_stats['train_mean']\n","train_global_std = global_stats['train_std']\n","\n","print(f\"Number of training set samples: {len(train_sequences)}, number of test set samples: {len(test_sequences)}\")\n","print(f\"Standardization parameters: mean = {train_global_mean:.4f}, std = {train_global_std:.4f}\")"]},{"cell_type":"code","source":["# ------------------------- Dataset & Dataloader -------------------------\n","class ProteinDataset(Dataset):\n","    def __init__(self, sequences, matrices):\n","        self.sequences = sequences\n","        self.matrices = matrices\n","\n","    def __len__(self):\n","        return len(self.sequences)\n","\n","    def __getitem__(self, idx):\n","        seq = self.sequences[idx]\n","        mat = self.matrices[idx]\n","        return seq, torch.tensor(mat, dtype=torch.float32)\n","\n","def collate_fn(batch):\n","    sequences, matrices = zip(*batch)\n","    vocab = \"ACDEFGHIKLMNPQRSTVWY\"\n","    aa_to_index = {aa: i for i, aa in enumerate(vocab)}\n","\n","    indexed_sequences = [\n","        torch.tensor([aa_to_index[aa] for aa in seq], dtype=torch.long)\n","        for seq in sequences\n","    ]\n","\n","    padding_value = 20  # vocab_size\n","    padded_seqs = pad_sequence(indexed_sequences, batch_first=True, padding_value=padding_value)\n","    src_key_padding_mask = (padded_seqs == padding_value)\n","\n","    # Processing distance matrix - need padding to the same size\n","    max_len = padded_seqs.size(1)\n","    padded_matrices = []\n","    matrix_masks = []\n","\n","    for i, mat in enumerate(matrices):\n","        seq_len = len(sequences[i])\n","        # Create a padded matrix\n","        padded_mat = torch.full((max_len, max_len), fill_value=-99.0, dtype=torch.float32)\n","        padded_mat[:seq_len, :seq_len] = mat\n","        padded_matrices.append(padded_mat)\n","\n","        # Creating a matrix mask\n","        mat_mask = torch.zeros(max_len, max_len, dtype=torch.bool)\n","        mat_mask[:seq_len, :seq_len] = True\n","        matrix_masks.append(mat_mask)\n","\n","    padded_matrices = torch.stack(padded_matrices)\n","    matrix_masks = torch.stack(matrix_masks)\n","\n","    return {\n","    'input_seqs': padded_seqs,\n","    'distance_matrix': padded_matrices,\n","    'src_key_padding_mask': src_key_padding_mask,\n","    'matrix_mask': matrix_masks}\n","\n","\n","## Datasets\n","train_dataset = ProteinDataset(train_sequences, train_matrices)\n","test_dataset = ProteinDataset(test_sequences, test_matrices)\n","\n","train_loader = DataLoader(\n","    train_dataset,\n","    batch_size=4,\n","    shuffle=True,\n","    collate_fn=collate_fn,\n","    num_workers=0,\n","    pin_memory=False\n",")\n","\n","test_loader = DataLoader(\n","    test_dataset,\n","    batch_size=4,\n","    collate_fn=collate_fn,\n","    num_workers=0,\n","    pin_memory=False\n",")\n","\n","del train_data, test_data, train_sequences, train_matrices, test_sequences, test_matrices"],"metadata":{"id":"6Mec-UxeFDZA","executionInfo":{"status":"ok","timestamp":1748797655512,"user_tz":-120,"elapsed":36,"user":{"displayName":"Youliang","userId":"05608918674526622561"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# ------------------------- Input Vector Embedding -------------------------\n","# learnable encoding\n","class LearnableEmbedding(nn.Module):\n","    def __init__(self, embedding_dim=128, vocab_size=20):\n","        super().__init__()\n","        self.vocab_size = vocab_size\n","        self.pad_index = vocab_size\n","        self.embedding = nn.Embedding(vocab_size + 1, embedding_dim, padding_idx=self.pad_index)\n","\n","    def forward(self, x):\n","        # x: tensor (batch_size, seq_len)\n","        embeddings = self.embedding(x)  # (batch_size, seq_len, embedding_dim)\n","        return embeddings\n","\n","# ------------------------- Position Encoding -------------------------\n","class PositionalEncoding(nn.Module):\n","    def __init__(self, d_model, max_len=1024):\n","        super().__init__()\n","        pe = torch.zeros(max_len, d_model)  # shape: (max_len, d_model)\n","        position = torch.arange(0, max_len, dtype=torch.float32).unsqueeze(1)\n","        div_term = torch.exp(torch.arange(0, d_model, 2) * (-np.log(10000.0) / d_model))\n","\n","        pe[:, 0::2] = torch.sin(position * div_term)\n","        pe[:, 1::2] = torch.cos(position * div_term)\n","        self.register_buffer('pe', pe.unsqueeze(0))  # shape: (1, max_len, d_model)\n","\n","    def forward(self, x):\n","        x = x + self.pe[:, :x.size(1), :]\n","        return x"],"metadata":{"id":"Fh37HYeU9VH5","executionInfo":{"status":"ok","timestamp":1748798057893,"user_tz":-120,"elapsed":23,"user":{"displayName":"Youliang","userId":"05608918674526622561"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# ------------------------- Transformer Encoder -------------------------\n","class TransformerEncoder(nn.Module):\n","    def __init__(self,\n","                 embedding_dim=128,\n","                 num_heads=8,\n","                 num_layers=6,\n","                 ff_dim=512,\n","                 dropout=0.1,\n","                 max_len=1024):\n","        super().__init__()\n","\n","        self.embedding_dim = embedding_dim\n","        self.amino_acid_embedding = LearnableEmbedding(embedding_dim=embedding_dim, vocab_size=20)\n","        self.positional_encoding = PositionalEncoding(d_model=embedding_dim, max_len=max_len)\n","        self.dropout = nn.Dropout(dropout)\n","\n","        # Transformer encoder layer single\n","        encoder_layer = nn.TransformerEncoderLayer(\n","            d_model=embedding_dim,\n","            nhead=num_heads,\n","            dim_feedforward=ff_dim,\n","            dropout=dropout,\n","            activation='relu',\n","            batch_first=True\n","        )\n","        self.transformer_encoder = nn.TransformerEncoder(encoder_layer=encoder_layer, num_layers=num_layers)\n","\n","    def forward(self, input_seqs, src_key_padding_mask=None):\n","        \"\"\"\n","        Args:\n","        input_seqs: (batch_size, seq_len) - amino acid index sequence\n","        src_key_padding_mask: (batch_size, seq_len) - padding mask\n","\n","        Returns:\n","        encoded_seq: (batch_size, seq_len, embedding_dim) - encoded sequence representation\n","        \"\"\"\n","\n","        embedded = self.amino_acid_embedding(input_seqs)  # (batch_size, seq_len, embedding_dim)\n","        embedded = self.positional_encoding(embedded)  # (batch_size, seq_len, embedding_dim)\n","        embedded = self.dropout(embedded)\n","        encoded_seq = self.transformer_encoder(embedded, src_key_padding_mask=src_key_padding_mask)  # (batch_size, seq_len, embedding_dim)\n","\n","        return encoded_seq\n","\n","# ------------------------- Distance Matrix Decoder -------------------------\n","class DistanceMatrixDecoder(nn.Module):\n","    def __init__(self, embedding_dim=128, hidden_dim=256, dropout=0.1):\n","        super().__init__()\n","\n","        self.embedding_dim = embedding_dim\n","        self.hidden_dim = hidden_dim\n","\n","        # Network for generating distance matrices We need to combine the\n","        # representations of two residues to predict the distance between them\n","        # Method: For each pair of residues (i, j), their embeddings are\n","        # connected and the distance between the two residues is predicted\n","        # through a linear layer.\n","        self.distance_predictor = nn.Sequential(\n","            nn.Linear(embedding_dim * 2, hidden_dim),\n","            nn.ReLU(),\n","            nn.Dropout(dropout),\n","            nn.Linear(hidden_dim, hidden_dim // 2),\n","            nn.ReLU(),\n","            nn.Dropout(dropout),\n","            nn.Linear(hidden_dim // 2, 1)  # Output a single distance value\n","        )\n","\n","    def forward(self, encoded_seq, matrix_mask=None):\n","        \"\"\"\n","        Args:\n","        encoded_seq: (batch_size, seq_len, embedding_dim) - encoded sequence\n","        matrix_mask: (batch_size, seq_len, seq_len) - effective area mask of distance matrix\n","\n","        Returns:\n","        distance_matrix: (batch_size, seq_len, seq_len) - predicted distance matrix\n","        \"\"\"\n","        batch_size, seq_len, embedding_dim = encoded_seq.shape\n","\n","        seq_i = encoded_seq.unsqueeze(2).expand(batch_size, seq_len, seq_len, embedding_dim)  # (batch, seq_len, seq_len, emb)\n","        seq_j = encoded_seq.unsqueeze(1).expand(batch_size, seq_len, seq_len, embedding_dim)  # (batch, seq_len, seq_len, emb)\n","\n","        # Connect each pair of residues\n","        pair_features = torch.cat([seq_i, seq_j], dim=-1)  # (batch, seq_len, seq_len, emb*2)\n","\n","        # Predicting distance using multi-layer perceptron\n","        distances = self.distance_predictor(pair_features)  # (batch, seq_len, seq_len, 1)\n","        distance_matrix = distances.squeeze(-1)  # (batch, seq_len, seq_len)\n","\n","        # Make sure the distance matrix is ​​symmetric\n","        distance_matrix = (distance_matrix + distance_matrix.transpose(-1, -2)) / 2\n","\n","        if matrix_mask is not None:\n","            distance_matrix = distance_matrix * matrix_mask.float()\n","\n","        return distance_matrix\n","\n","# ------------------------- Complete ProteinDistancePredictor -------------------------\n","class ProteinDistancePredictor(nn.Module):\n","    def __init__(self,\n","                 embedding_dim=128,\n","                 num_heads=8,\n","                 num_layers=6,\n","                 ff_dim=512,\n","                 decoder_hidden_dim=256,\n","                 dropout=0.1,\n","                 max_len=1024):\n","        super().__init__()\n","\n","        self.encoder = TransformerEncoder(\n","            embedding_dim=embedding_dim,\n","            num_heads=num_heads,\n","            num_layers=num_layers,\n","            ff_dim=ff_dim,\n","            dropout=dropout,\n","            max_len=max_len\n","        )\n","\n","        self.decoder = DistanceMatrixDecoder(\n","            embedding_dim=embedding_dim,\n","            hidden_dim=decoder_hidden_dim,\n","            dropout=dropout\n","        )\n","\n","    def forward(self, input_seqs, src_key_padding_mask=None, matrix_mask=None):\n","        \"\"\"\n","        Args:\n","        input_seqs: (batch_size, seq_len) - amino acid index sequence\n","        src_key_padding_mask: (batch_size, seq_len) - sequence padding mask\n","        matrix_mask: (batch_size, seq_len, seq_len) - distance matrix mask\n","\n","        Returns:\n","        distance_matrix: (batch_size, seq_len, seq_len) - predicted distance matrix\n","        \"\"\"\n","        # Transformer encoder\n","        encoded_seq = self.encoder(input_seqs, src_key_padding_mask)\n","        # predict distance matrix\n","        distance_matrix = self.decoder(encoded_seq, matrix_mask)\n","\n","        return distance_matrix\n"],"metadata":{"id":"bDH8HNTFfUOV","executionInfo":{"status":"ok","timestamp":1748798059516,"user_tz":-120,"elapsed":8,"user":{"displayName":"Youliang","userId":"05608918674526622561"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# ------------------------- Loss Function -------------------------\n","class MaskedMSELoss(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","\n","    def forward(self, pred, target, mask):\n","        \"\"\"\n","        Args:\n","        pred: (batch_size, seq_len, seq_len) - predicted distance matrix\n","        target: (batch_size, seq_len, seq_len) - actual distance matrix\n","        mask: (batch_size, seq_len, seq_len) - effective area mask\n","        \"\"\"\n","        valid_pred = pred[mask]\n","        valid_target = target[mask]\n","\n","        return F.mse_loss(valid_pred, valid_target)\n","\n","# ------------------------- Training Function -------------------------\n","def train_epoch(model, train_loader, criterion, optimizer, device):\n","    model.train()\n","    total_loss = 0.0\n","    num_batches = 0\n","\n","    for batch_idx, batch in enumerate(train_loader):\n","\n","        input_seqs = batch['input_seqs'].to(device)\n","        target_matrices = batch['distance_matrix'].to(device)\n","        src_padding_mask = batch['src_key_padding_mask'].to(device)\n","        matrix_mask = batch['matrix_mask'].to(device)\n","\n","        optimizer.zero_grad()\n","\n","        pred_matrices = model(\n","            input_seqs=input_seqs,\n","            src_key_padding_mask=src_padding_mask,\n","            matrix_mask=matrix_mask\n","        )\n","        loss = criterion(pred_matrices, target_matrices, matrix_mask)\n","        loss.backward()\n","\n","        # Gradient clipping (to prevent gradient explosion)\n","        torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n","\n","        optimizer.step()\n","\n","        total_loss += loss.item()\n","        num_batches += 1\n","\n","        if batch_idx % 10 == 0:\n","            print(f'Train Batch [{batch_idx}/{len(train_loader)}], Loss: {loss.item():.6f}')\n","\n","    avg_loss = total_loss / num_batches\n","    return avg_loss\n","\n","# ------------------------- Validation Function -------------------------\n","def validate_epoch(model, val_loader, criterion, device):\n","    model.eval()\n","    total_loss = 0.0\n","    num_batches = 0\n","\n","    with torch.no_grad():\n","        for batch in val_loader:\n","\n","            input_seqs = batch['input_seqs'].to(device)\n","            target_matrices = batch['distance_matrix'].to(device)\n","            src_padding_mask = batch['src_key_padding_mask'].to(device)\n","            matrix_mask = batch['matrix_mask'].to(device)\n","\n","            pred_matrices = model(\n","                input_seqs=input_seqs,\n","                src_key_padding_mask=src_padding_mask,\n","                matrix_mask=matrix_mask\n","            )\n","\n","            loss = criterion(pred_matrices, target_matrices, matrix_mask)\n","            total_loss += loss.item()\n","            num_batches += 1\n","\n","    avg_loss = total_loss / num_batches\n","    return avg_loss\n","\n","# ------------------------- Model Initialization -------------------------\n","model = ProteinDistancePredictor(\n","    embedding_dim=128,\n","    num_heads=8,\n","    num_layers=6,\n","    ff_dim=512,\n","    decoder_hidden_dim=256,\n","    dropout=0.1,\n","    max_len=1024\n",").to(device)\n","\n","criterion = MaskedMSELoss()\n","optimizer = torch.optim.Adam(model.parameters(), lr=1e-4, weight_decay=1e-5)\n","scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(\n","    optimizer, mode='min', factor=0.5, patience=5, verbose=True\n",")\n","\n","print(f\"Model parameters: {sum(p.numel() for p in model.parameters()):,}\")\n","print(f\"Trainable parameters: {sum(p.numel() for p in model.parameters() if p.requires_grad):,}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3A7r4mcHfUS4","executionInfo":{"status":"ok","timestamp":1748798072577,"user_tz":-120,"elapsed":5677,"user":{"displayName":"Youliang","userId":"05608918674526622561"}},"outputId":"8306101c-adf7-4ef0-b63e-6e8428db55ea"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Model parameters: 1,291,137\n","Trainable parameters: 1,291,137\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/torch/optim/lr_scheduler.py:62: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["# ------------------------- Training Loop -------------------------\n","def train_model(model, train_loader, test_loader, criterion, optimizer, scheduler,\n","                num_epochs=30, save_path='/content/drive/MyDrive/ProteinTrainResults/'):\n","\n","    # 记录训练历史\n","    history = defaultdict(list)\n","    best_val_loss = float('inf')\n","    start_time = time.time()\n","\n","    print(\"Starting training...\")\n","    print(\"=\"*50)\n","\n","    for epoch in range(num_epochs):\n","        epoch_start_time = time.time()\n","\n","        # Training\n","        train_loss = train_epoch(model, train_loader, criterion, optimizer, device)\n","        val_loss = validate_epoch(model, test_loader, criterion, device)\n","        scheduler.step(val_loss)\n","\n","        # Recording History\n","        history['train_loss'].append(train_loss)\n","        history['val_loss'].append(val_loss)\n","        history['lr'].append(optimizer.param_groups[0]['lr'])\n","\n","        epoch_time = time.time() - epoch_start_time\n","        total_time = time.time() - start_time\n","\n","        print(f'Epoch [{epoch+1}/{num_epochs}]')\n","        print(f'Train Loss: {train_loss:.6f}, Val Loss: {val_loss:.6f}')\n","        print(f'LR: {optimizer.param_groups[0][\"lr\"]:.2e}')\n","        print(f'Epoch Time: {epoch_time:.2f}s, Total Time: {total_time/60:.2f}min')\n","        print(\"-\"*50)\n","\n","        # Save the best model\n","        if val_loss < best_val_loss:\n","            best_val_loss = val_loss\n","            torch.save({\n","                'epoch': epoch,\n","                'model_state_dict': model.state_dict(),\n","                'optimizer_state_dict': optimizer.state_dict(),\n","                'scheduler_state_dict': scheduler.state_dict(),\n","                'train_loss': train_loss,\n","                'val_loss': val_loss,\n","                'history': dict(history)\n","            }, f'{save_path}best_model.pth')\n","            print(f'✓ New best model saved! Val Loss: {val_loss:.6f}')\n","\n","        # Save a checkpoint every 10 epochs\n","        if (epoch + 1) % 10 == 0:\n","            torch.save({\n","                'epoch': epoch,\n","                'model_state_dict': model.state_dict(),\n","                'optimizer_state_dict': optimizer.state_dict(),\n","                'scheduler_state_dict': scheduler.state_dict(),\n","                'train_loss': train_loss,\n","                'val_loss': val_loss,\n","                'history': dict(history)\n","            }, f'{save_path}checkpoint_epoch_{epoch+1}.pth')\n","            print(f'✓ Checkpoint saved at epoch {epoch+1}')\n","\n","    print(\"Training completed!\")\n","    print(f\"Best validation loss: {best_val_loss:.6f}\")\n","    print(f\"Total training time: {(time.time() - start_time)/3600:.2f} hours\")\n","\n","    return history\n","\n","def plot_training_curves(history):\n","    \"\"\"Plotting training curves\"\"\"\n","    fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n","\n","    # Loss curves\n","    axes[0, 0].plot(history['train_loss'], label='Train Loss', color='blue')\n","    axes[0, 0].plot(history['val_loss'], label='Validation Loss', color='red')\n","    axes[0, 0].set_xlabel('Epoch')\n","    axes[0, 0].set_ylabel('Loss')\n","    axes[0, 0].set_title('Training and Validation Loss')\n","    axes[0, 0].legend()\n","    axes[0, 0].grid(True, alpha=0.3)\n","\n","    # Loss curves (log scale)\n","    axes[0, 1].plot(history['train_loss'], label='Train Loss', color='blue')\n","    axes[0, 1].plot(history['val_loss'], label='Validation Loss', color='red')\n","    axes[0, 1].set_xlabel('Epoch')\n","    axes[0, 1].set_ylabel('Loss (log scale)')\n","    axes[0, 1].set_title('Training and Validation Loss (Log Scale)')\n","    axes[0, 1].set_yscale('log')\n","    axes[0, 1].legend()\n","    axes[0, 1].grid(True, alpha=0.3)\n","\n","    # Learning rate\n","    axes[1, 0].plot(history['lr'], color='green')\n","    axes[1, 0].set_xlabel('Epoch')\n","    axes[1, 0].set_ylabel('Learning Rate')\n","    axes[1, 0].set_title('Learning Rate Schedule')\n","    axes[1, 0].set_yscale('log')\n","    axes[1, 0].grid(True, alpha=0.3)\n","\n","    # Loss difference\n","    loss_diff = [abs(t - v) for t, v in zip(history['train_loss'], history['val_loss'])]\n","    axes[1, 1].plot(loss_diff, color='purple')\n","    axes[1, 1].set_xlabel('Epoch')\n","    axes[1, 1].set_ylabel('|Train Loss - Val Loss|')\n","    axes[1, 1].set_title('Training-Validation Loss Gap')\n","    axes[1, 1].grid(True, alpha=0.3)\n","\n","    plt.tight_layout()\n","    plt.show()\n","\n","    print(\"Training Statistics:\")\n","    print(f\"Final train loss: {history['train_loss'][-1]:.6f}\")\n","    print(f\"Final val loss: {history['val_loss'][-1]:.6f}\")\n","    print(f\"Best val loss: {min(history['val_loss']):.6f} at epoch {history['val_loss'].index(min(history['val_loss']))+1}\")\n","    print(f\"Final learning rate: {history['lr'][-1]:.2e}\")"],"metadata":{"id":"oZ2G4h2YfUXt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------------------------- Main -------------------------\n","if __name__ == \"__main__\":\n","    # Train model\n","    print(\"Model and data ready. Starting training...\")\n","\n","    history = train_model(\n","        model=model,\n","        train_loader=train_loader,\n","        test_loader=test_loader,\n","        criterion=criterion,\n","        optimizer=optimizer,\n","        scheduler=scheduler,\n","        num_epochs=30,\n","        save_path='/content/drive/MyDrive/ProteinTrainResults/'\n","    )\n","\n","    plot_training_curves(history)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"c2NzE5c6fU4P","executionInfo":{"status":"ok","timestamp":1748004681717,"user_tz":-120,"elapsed":2119033,"user":{"displayName":"Youliang","userId":"05608918674526622561"}},"outputId":"5b1a1b0a-cb68-4e54-adce-99da0498cb43"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model and data ready. Starting training...\n","Starting training...\n","==================================================\n","Train Batch [0/693], Loss: 1.748750\n","Train Batch [10/693], Loss: 0.455508\n","Train Batch [20/693], Loss: 0.656507\n","Train Batch [30/693], Loss: 0.195989\n","Train Batch [40/693], Loss: 0.215905\n","Train Batch [50/693], Loss: 0.318659\n","Train Batch [60/693], Loss: 0.254723\n","Train Batch [70/693], Loss: 0.126198\n","Train Batch [80/693], Loss: 0.239651\n","Train Batch [90/693], Loss: 0.168755\n","Train Batch [100/693], Loss: 0.198598\n","Train Batch [110/693], Loss: 0.303103\n","Train Batch [120/693], Loss: 0.092274\n","Train Batch [130/693], Loss: 0.155564\n","Train Batch [140/693], Loss: 0.594083\n","Train Batch [150/693], Loss: 0.406074\n","Train Batch [160/693], Loss: 0.234832\n","Train Batch [170/693], Loss: 0.853421\n","Train Batch [180/693], Loss: 0.559355\n","Train Batch [190/693], Loss: 0.066557\n","Train Batch [200/693], Loss: 0.284315\n","Train Batch [210/693], Loss: 0.317048\n","Train Batch [220/693], Loss: 0.257974\n","Train Batch [230/693], Loss: 0.957115\n","Train Batch [240/693], Loss: 0.832644\n","Train Batch [250/693], Loss: 0.509952\n","Train Batch [260/693], Loss: 0.061914\n","Train Batch [270/693], Loss: 0.220532\n","Train Batch [280/693], Loss: 0.139462\n","Train Batch [290/693], Loss: 0.469566\n","Train Batch [300/693], Loss: 0.352571\n","Train Batch [310/693], Loss: 0.545999\n","Train Batch [320/693], Loss: 0.361281\n","Train Batch [330/693], Loss: 0.185478\n","Train Batch [340/693], Loss: 0.416226\n","Train Batch [350/693], Loss: 0.515204\n","Train Batch [360/693], Loss: 0.199584\n","Train Batch [370/693], Loss: 0.102397\n","Train Batch [380/693], Loss: 0.132631\n","Train Batch [390/693], Loss: 0.394551\n","Train Batch [400/693], Loss: 0.156670\n","Train Batch [410/693], Loss: 0.098176\n","Train Batch [420/693], Loss: 3.377676\n","Train Batch [430/693], Loss: 0.492425\n","Train Batch [440/693], Loss: 0.212822\n","Train Batch [450/693], Loss: 0.120810\n","Train Batch [460/693], Loss: 0.161404\n","Train Batch [470/693], Loss: 0.558206\n","Train Batch [480/693], Loss: 0.727199\n","Train Batch [490/693], Loss: 0.155618\n","Train Batch [500/693], Loss: 0.073715\n","Train Batch [510/693], Loss: 0.145934\n","Train Batch [520/693], Loss: 1.340555\n","Train Batch [530/693], Loss: 0.129758\n","Train Batch [540/693], Loss: 0.526536\n","Train Batch [550/693], Loss: 0.155980\n","Train Batch [560/693], Loss: 0.122684\n","Train Batch [570/693], Loss: 0.098358\n","Train Batch [580/693], Loss: 0.154171\n","Train Batch [590/693], Loss: 0.641373\n","Train Batch [600/693], Loss: 0.426770\n","Train Batch [610/693], Loss: 0.219196\n","Train Batch [620/693], Loss: 0.059874\n","Train Batch [630/693], Loss: 0.335406\n","Train Batch [640/693], Loss: 0.354600\n","Train Batch [650/693], Loss: 0.423745\n","Train Batch [660/693], Loss: 0.183986\n","Train Batch [670/693], Loss: 0.289236\n","Train Batch [680/693], Loss: 0.265679\n","Train Batch [690/693], Loss: 0.544023\n","Epoch [1/30]\n","Train Loss: 0.363450, Val Loss: 0.294690\n","LR: 1.00e-04\n","Epoch Time: 71.65s, Total Time: 1.19min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.294690\n","Train Batch [0/693], Loss: 1.070428\n","Train Batch [10/693], Loss: 0.429025\n","Train Batch [20/693], Loss: 0.102083\n","Train Batch [30/693], Loss: 0.437321\n","Train Batch [40/693], Loss: 0.171027\n","Train Batch [50/693], Loss: 0.168574\n","Train Batch [60/693], Loss: 0.179314\n","Train Batch [70/693], Loss: 0.562293\n","Train Batch [80/693], Loss: 0.893139\n","Train Batch [90/693], Loss: 0.116732\n","Train Batch [100/693], Loss: 0.124742\n","Train Batch [110/693], Loss: 0.135441\n","Train Batch [120/693], Loss: 0.101437\n","Train Batch [130/693], Loss: 0.106228\n","Train Batch [140/693], Loss: 0.710946\n","Train Batch [150/693], Loss: 0.208371\n","Train Batch [160/693], Loss: 0.230789\n","Train Batch [170/693], Loss: 0.088917\n","Train Batch [180/693], Loss: 0.413574\n","Train Batch [190/693], Loss: 0.152414\n","Train Batch [200/693], Loss: 0.287531\n","Train Batch [210/693], Loss: 0.962533\n","Train Batch [220/693], Loss: 0.062800\n","Train Batch [230/693], Loss: 0.385938\n","Train Batch [240/693], Loss: 1.301446\n","Train Batch [250/693], Loss: 0.476581\n","Train Batch [260/693], Loss: 0.198526\n","Train Batch [270/693], Loss: 0.213854\n","Train Batch [280/693], Loss: 0.139076\n","Train Batch [290/693], Loss: 0.244453\n","Train Batch [300/693], Loss: 0.141612\n","Train Batch [310/693], Loss: 0.323808\n","Train Batch [320/693], Loss: 0.389618\n","Train Batch [330/693], Loss: 0.055743\n","Train Batch [340/693], Loss: 0.190074\n","Train Batch [350/693], Loss: 0.170207\n","Train Batch [360/693], Loss: 0.727208\n","Train Batch [370/693], Loss: 0.097421\n","Train Batch [380/693], Loss: 0.317436\n","Train Batch [390/693], Loss: 0.175949\n","Train Batch [400/693], Loss: 0.247276\n","Train Batch [410/693], Loss: 0.705262\n","Train Batch [420/693], Loss: 0.126661\n","Train Batch [430/693], Loss: 0.062244\n","Train Batch [440/693], Loss: 0.300361\n","Train Batch [450/693], Loss: 0.141814\n","Train Batch [460/693], Loss: 0.145253\n","Train Batch [470/693], Loss: 0.212354\n","Train Batch [480/693], Loss: 0.151310\n","Train Batch [490/693], Loss: 0.150461\n","Train Batch [500/693], Loss: 0.127920\n","Train Batch [510/693], Loss: 0.324022\n","Train Batch [520/693], Loss: 0.242394\n","Train Batch [530/693], Loss: 0.385171\n","Train Batch [540/693], Loss: 0.587289\n","Train Batch [550/693], Loss: 0.254163\n","Train Batch [560/693], Loss: 0.402212\n","Train Batch [570/693], Loss: 0.765988\n","Train Batch [580/693], Loss: 2.423689\n","Train Batch [590/693], Loss: 0.133736\n","Train Batch [600/693], Loss: 0.657512\n","Train Batch [610/693], Loss: 0.160137\n","Train Batch [620/693], Loss: 0.771393\n","Train Batch [630/693], Loss: 0.155010\n","Train Batch [640/693], Loss: 0.054924\n","Train Batch [650/693], Loss: 1.280396\n","Train Batch [660/693], Loss: 0.995143\n","Train Batch [670/693], Loss: 0.092382\n","Train Batch [680/693], Loss: 0.106590\n","Train Batch [690/693], Loss: 0.095995\n","Epoch [2/30]\n","Train Loss: 0.336092, Val Loss: 0.265879\n","LR: 1.00e-04\n","Epoch Time: 70.67s, Total Time: 2.39min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.265879\n","Train Batch [0/693], Loss: 0.349445\n","Train Batch [10/693], Loss: 0.124236\n","Train Batch [20/693], Loss: 0.086248\n","Train Batch [30/693], Loss: 0.248869\n","Train Batch [40/693], Loss: 0.576077\n","Train Batch [50/693], Loss: 0.978792\n","Train Batch [60/693], Loss: 0.096171\n","Train Batch [70/693], Loss: 0.233214\n","Train Batch [80/693], Loss: 0.963549\n","Train Batch [90/693], Loss: 0.160510\n","Train Batch [100/693], Loss: 0.087747\n","Train Batch [110/693], Loss: 0.132162\n","Train Batch [120/693], Loss: 0.479405\n","Train Batch [130/693], Loss: 0.258624\n","Train Batch [140/693], Loss: 0.316058\n","Train Batch [150/693], Loss: 0.651835\n","Train Batch [160/693], Loss: 0.096962\n","Train Batch [170/693], Loss: 0.154580\n","Train Batch [180/693], Loss: 0.228290\n","Train Batch [190/693], Loss: 0.179957\n","Train Batch [200/693], Loss: 0.558460\n","Train Batch [210/693], Loss: 0.166626\n","Train Batch [220/693], Loss: 0.084034\n","Train Batch [230/693], Loss: 0.128382\n","Train Batch [240/693], Loss: 0.108358\n","Train Batch [250/693], Loss: 1.393895\n","Train Batch [260/693], Loss: 0.180776\n","Train Batch [270/693], Loss: 0.237556\n","Train Batch [280/693], Loss: 0.270138\n","Train Batch [290/693], Loss: 0.117344\n","Train Batch [300/693], Loss: 0.195132\n","Train Batch [310/693], Loss: 0.386779\n","Train Batch [320/693], Loss: 0.507806\n","Train Batch [330/693], Loss: 0.756166\n","Train Batch [340/693], Loss: 0.216375\n","Train Batch [350/693], Loss: 0.240346\n","Train Batch [360/693], Loss: 0.073544\n","Train Batch [370/693], Loss: 0.217360\n","Train Batch [380/693], Loss: 0.085235\n","Train Batch [390/693], Loss: 0.394572\n","Train Batch [400/693], Loss: 0.140594\n","Train Batch [410/693], Loss: 1.257595\n","Train Batch [420/693], Loss: 0.094940\n","Train Batch [430/693], Loss: 0.210805\n","Train Batch [440/693], Loss: 0.140191\n","Train Batch [450/693], Loss: 0.703213\n","Train Batch [460/693], Loss: 0.406545\n","Train Batch [470/693], Loss: 0.128018\n","Train Batch [480/693], Loss: 0.111626\n","Train Batch [490/693], Loss: 0.281433\n","Train Batch [500/693], Loss: 0.613739\n","Train Batch [510/693], Loss: 0.221167\n","Train Batch [520/693], Loss: 0.408297\n","Train Batch [530/693], Loss: 0.073034\n","Train Batch [540/693], Loss: 0.078128\n","Train Batch [550/693], Loss: 0.169237\n","Train Batch [560/693], Loss: 0.084902\n","Train Batch [570/693], Loss: 0.155967\n","Train Batch [580/693], Loss: 0.454622\n","Train Batch [590/693], Loss: 0.066796\n","Train Batch [600/693], Loss: 0.102741\n","Train Batch [610/693], Loss: 0.203243\n","Train Batch [620/693], Loss: 0.302923\n","Train Batch [630/693], Loss: 0.271062\n","Train Batch [640/693], Loss: 0.605625\n","Train Batch [650/693], Loss: 0.048246\n","Train Batch [660/693], Loss: 0.133391\n","Train Batch [670/693], Loss: 0.452412\n","Train Batch [680/693], Loss: 0.232956\n","Train Batch [690/693], Loss: 0.063167\n","Epoch [3/30]\n","Train Loss: 0.310999, Val Loss: 0.266717\n","LR: 1.00e-04\n","Epoch Time: 70.33s, Total Time: 3.57min\n","--------------------------------------------------\n","Train Batch [0/693], Loss: 0.202635\n","Train Batch [10/693], Loss: 0.169055\n","Train Batch [20/693], Loss: 0.425354\n","Train Batch [30/693], Loss: 0.214517\n","Train Batch [40/693], Loss: 0.229953\n","Train Batch [50/693], Loss: 0.164779\n","Train Batch [60/693], Loss: 0.666754\n","Train Batch [70/693], Loss: 0.256750\n","Train Batch [80/693], Loss: 0.074656\n","Train Batch [90/693], Loss: 0.088611\n","Train Batch [100/693], Loss: 0.234098\n","Train Batch [110/693], Loss: 0.141203\n","Train Batch [120/693], Loss: 0.175774\n","Train Batch [130/693], Loss: 0.095251\n","Train Batch [140/693], Loss: 0.232945\n","Train Batch [150/693], Loss: 0.395974\n","Train Batch [160/693], Loss: 0.120271\n","Train Batch [170/693], Loss: 0.600770\n","Train Batch [180/693], Loss: 0.155877\n","Train Batch [190/693], Loss: 0.151684\n","Train Batch [200/693], Loss: 0.112625\n","Train Batch [210/693], Loss: 0.141143\n","Train Batch [220/693], Loss: 0.504019\n","Train Batch [230/693], Loss: 0.076584\n","Train Batch [240/693], Loss: 0.150412\n","Train Batch [250/693], Loss: 0.317089\n","Train Batch [260/693], Loss: 0.142993\n","Train Batch [270/693], Loss: 0.132689\n","Train Batch [280/693], Loss: 0.207377\n","Train Batch [290/693], Loss: 0.310739\n","Train Batch [300/693], Loss: 0.303976\n","Train Batch [310/693], Loss: 0.314938\n","Train Batch [320/693], Loss: 0.283948\n","Train Batch [330/693], Loss: 0.083321\n","Train Batch [340/693], Loss: 0.228004\n","Train Batch [350/693], Loss: 0.120170\n","Train Batch [360/693], Loss: 0.098878\n","Train Batch [370/693], Loss: 0.060987\n","Train Batch [380/693], Loss: 0.207711\n","Train Batch [390/693], Loss: 0.096796\n","Train Batch [400/693], Loss: 0.345307\n","Train Batch [410/693], Loss: 0.349702\n","Train Batch [420/693], Loss: 0.128299\n","Train Batch [430/693], Loss: 0.123536\n","Train Batch [440/693], Loss: 0.088451\n","Train Batch [450/693], Loss: 0.138325\n","Train Batch [460/693], Loss: 0.550944\n","Train Batch [470/693], Loss: 0.279990\n","Train Batch [480/693], Loss: 0.144745\n","Train Batch [490/693], Loss: 0.099493\n","Train Batch [500/693], Loss: 0.241016\n","Train Batch [510/693], Loss: 0.112144\n","Train Batch [520/693], Loss: 0.376095\n","Train Batch [530/693], Loss: 0.565000\n","Train Batch [540/693], Loss: 0.151072\n","Train Batch [550/693], Loss: 0.078897\n","Train Batch [560/693], Loss: 0.076348\n","Train Batch [570/693], Loss: 0.306215\n","Train Batch [580/693], Loss: 0.489409\n","Train Batch [590/693], Loss: 0.123768\n","Train Batch [600/693], Loss: 0.300206\n","Train Batch [610/693], Loss: 0.320588\n","Train Batch [620/693], Loss: 0.073457\n","Train Batch [630/693], Loss: 0.560862\n","Train Batch [640/693], Loss: 0.275402\n","Train Batch [650/693], Loss: 0.081136\n","Train Batch [660/693], Loss: 0.106101\n","Train Batch [670/693], Loss: 0.150455\n","Train Batch [680/693], Loss: 0.286900\n","Train Batch [690/693], Loss: 0.092300\n","Epoch [4/30]\n","Train Loss: 0.299127, Val Loss: 0.245883\n","LR: 1.00e-04\n","Epoch Time: 70.67s, Total Time: 4.75min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.245883\n","Train Batch [0/693], Loss: 0.939971\n","Train Batch [10/693], Loss: 0.077961\n","Train Batch [20/693], Loss: 1.337591\n","Train Batch [30/693], Loss: 0.749736\n","Train Batch [40/693], Loss: 0.111183\n","Train Batch [50/693], Loss: 0.080718\n","Train Batch [60/693], Loss: 0.052106\n","Train Batch [70/693], Loss: 0.091135\n","Train Batch [80/693], Loss: 0.224537\n","Train Batch [90/693], Loss: 0.526623\n","Train Batch [100/693], Loss: 0.081825\n","Train Batch [110/693], Loss: 0.124007\n","Train Batch [120/693], Loss: 0.208212\n","Train Batch [130/693], Loss: 0.252107\n","Train Batch [140/693], Loss: 0.347240\n","Train Batch [150/693], Loss: 0.242109\n","Train Batch [160/693], Loss: 0.137304\n","Train Batch [170/693], Loss: 0.082600\n","Train Batch [180/693], Loss: 0.104643\n","Train Batch [190/693], Loss: 0.088002\n","Train Batch [200/693], Loss: 0.277543\n","Train Batch [210/693], Loss: 0.139007\n","Train Batch [220/693], Loss: 0.272488\n","Train Batch [230/693], Loss: 0.959966\n","Train Batch [240/693], Loss: 0.059085\n","Train Batch [250/693], Loss: 0.301795\n","Train Batch [260/693], Loss: 0.259280\n","Train Batch [270/693], Loss: 0.106615\n","Train Batch [280/693], Loss: 0.409594\n","Train Batch [290/693], Loss: 0.486123\n","Train Batch [300/693], Loss: 0.112138\n","Train Batch [310/693], Loss: 0.457882\n","Train Batch [320/693], Loss: 0.438918\n","Train Batch [330/693], Loss: 0.130073\n","Train Batch [340/693], Loss: 0.058576\n","Train Batch [350/693], Loss: 0.048632\n","Train Batch [360/693], Loss: 0.098533\n","Train Batch [370/693], Loss: 1.187247\n","Train Batch [380/693], Loss: 0.083330\n","Train Batch [390/693], Loss: 0.113756\n","Train Batch [400/693], Loss: 0.309555\n","Train Batch [410/693], Loss: 0.143759\n","Train Batch [420/693], Loss: 0.050729\n","Train Batch [430/693], Loss: 0.085752\n","Train Batch [440/693], Loss: 0.096615\n","Train Batch [450/693], Loss: 0.086643\n","Train Batch [460/693], Loss: 0.091099\n","Train Batch [470/693], Loss: 0.065533\n","Train Batch [480/693], Loss: 0.249201\n","Train Batch [490/693], Loss: 0.199807\n","Train Batch [500/693], Loss: 0.292905\n","Train Batch [510/693], Loss: 0.200479\n","Train Batch [520/693], Loss: 0.475807\n","Train Batch [530/693], Loss: 0.211972\n","Train Batch [540/693], Loss: 0.297380\n","Train Batch [550/693], Loss: 0.292938\n","Train Batch [560/693], Loss: 0.046617\n","Train Batch [570/693], Loss: 0.080761\n","Train Batch [580/693], Loss: 0.108080\n","Train Batch [590/693], Loss: 0.061512\n","Train Batch [600/693], Loss: 0.168593\n","Train Batch [610/693], Loss: 0.163628\n","Train Batch [620/693], Loss: 0.191281\n","Train Batch [630/693], Loss: 0.137448\n","Train Batch [640/693], Loss: 0.151654\n","Train Batch [650/693], Loss: 0.347357\n","Train Batch [660/693], Loss: 0.523747\n","Train Batch [670/693], Loss: 0.322669\n","Train Batch [680/693], Loss: 0.082971\n","Train Batch [690/693], Loss: 0.217456\n","Epoch [5/30]\n","Train Loss: 0.280925, Val Loss: 0.231354\n","LR: 1.00e-04\n","Epoch Time: 70.34s, Total Time: 5.92min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.231354\n","Train Batch [0/693], Loss: 0.273144\n","Train Batch [10/693], Loss: 0.155357\n","Train Batch [20/693], Loss: 0.181386\n","Train Batch [30/693], Loss: 0.075643\n","Train Batch [40/693], Loss: 0.081813\n","Train Batch [50/693], Loss: 0.237441\n","Train Batch [60/693], Loss: 0.324682\n","Train Batch [70/693], Loss: 0.122079\n","Train Batch [80/693], Loss: 0.381351\n","Train Batch [90/693], Loss: 0.234005\n","Train Batch [100/693], Loss: 0.153584\n","Train Batch [110/693], Loss: 0.086300\n","Train Batch [120/693], Loss: 0.093119\n","Train Batch [130/693], Loss: 0.269610\n","Train Batch [140/693], Loss: 0.524057\n","Train Batch [150/693], Loss: 0.092303\n","Train Batch [160/693], Loss: 0.244176\n","Train Batch [170/693], Loss: 0.051006\n","Train Batch [180/693], Loss: 0.234840\n","Train Batch [190/693], Loss: 0.134750\n","Train Batch [200/693], Loss: 0.065107\n","Train Batch [210/693], Loss: 0.061075\n","Train Batch [220/693], Loss: 0.100374\n","Train Batch [230/693], Loss: 0.081989\n","Train Batch [240/693], Loss: 0.316376\n","Train Batch [250/693], Loss: 0.152016\n","Train Batch [260/693], Loss: 0.786145\n","Train Batch [270/693], Loss: 0.417006\n","Train Batch [280/693], Loss: 0.115765\n","Train Batch [290/693], Loss: 0.433188\n","Train Batch [300/693], Loss: 0.061626\n","Train Batch [310/693], Loss: 0.599684\n","Train Batch [320/693], Loss: 0.053351\n","Train Batch [330/693], Loss: 0.464488\n","Train Batch [340/693], Loss: 0.433542\n","Train Batch [350/693], Loss: 0.131047\n","Train Batch [360/693], Loss: 0.087042\n","Train Batch [370/693], Loss: 0.455401\n","Train Batch [380/693], Loss: 0.219883\n","Train Batch [390/693], Loss: 0.067492\n","Train Batch [400/693], Loss: 0.179039\n","Train Batch [410/693], Loss: 0.172061\n","Train Batch [420/693], Loss: 0.118839\n","Train Batch [430/693], Loss: 0.284211\n","Train Batch [440/693], Loss: 0.419060\n","Train Batch [450/693], Loss: 0.585774\n","Train Batch [460/693], Loss: 0.086247\n","Train Batch [470/693], Loss: 0.099728\n","Train Batch [480/693], Loss: 0.064942\n","Train Batch [490/693], Loss: 0.321333\n","Train Batch [500/693], Loss: 0.408697\n","Train Batch [510/693], Loss: 0.398278\n","Train Batch [520/693], Loss: 0.331500\n","Train Batch [530/693], Loss: 0.180108\n","Train Batch [540/693], Loss: 0.169435\n","Train Batch [550/693], Loss: 0.201657\n","Train Batch [560/693], Loss: 0.123353\n","Train Batch [570/693], Loss: 0.180906\n","Train Batch [580/693], Loss: 0.223070\n","Train Batch [590/693], Loss: 0.226734\n","Train Batch [600/693], Loss: 0.202467\n","Train Batch [610/693], Loss: 0.253358\n","Train Batch [620/693], Loss: 0.074226\n","Train Batch [630/693], Loss: 0.080445\n","Train Batch [640/693], Loss: 0.226437\n","Train Batch [650/693], Loss: 0.099853\n","Train Batch [660/693], Loss: 0.169627\n","Train Batch [670/693], Loss: 0.115090\n","Train Batch [680/693], Loss: 0.104866\n","Train Batch [690/693], Loss: 0.081010\n","Epoch [6/30]\n","Train Loss: 0.270775, Val Loss: 0.226807\n","LR: 1.00e-04\n","Epoch Time: 70.88s, Total Time: 7.10min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.226807\n","Train Batch [0/693], Loss: 0.135378\n","Train Batch [10/693], Loss: 0.067843\n","Train Batch [20/693], Loss: 0.044965\n","Train Batch [30/693], Loss: 2.580555\n","Train Batch [40/693], Loss: 0.114644\n","Train Batch [50/693], Loss: 0.078433\n","Train Batch [60/693], Loss: 0.112322\n","Train Batch [70/693], Loss: 0.042606\n","Train Batch [80/693], Loss: 0.078557\n","Train Batch [90/693], Loss: 0.045779\n","Train Batch [100/693], Loss: 0.361566\n","Train Batch [110/693], Loss: 0.208987\n","Train Batch [120/693], Loss: 0.071111\n","Train Batch [130/693], Loss: 0.240749\n","Train Batch [140/693], Loss: 0.525415\n","Train Batch [150/693], Loss: 0.141267\n","Train Batch [160/693], Loss: 0.191735\n","Train Batch [170/693], Loss: 0.332711\n","Train Batch [180/693], Loss: 0.118714\n","Train Batch [190/693], Loss: 0.245595\n","Train Batch [200/693], Loss: 1.001886\n","Train Batch [210/693], Loss: 0.610151\n","Train Batch [220/693], Loss: 0.507904\n","Train Batch [230/693], Loss: 1.029496\n","Train Batch [240/693], Loss: 0.647315\n","Train Batch [250/693], Loss: 0.609971\n","Train Batch [260/693], Loss: 0.083709\n","Train Batch [270/693], Loss: 0.275550\n","Train Batch [280/693], Loss: 0.128332\n","Train Batch [290/693], Loss: 0.291777\n","Train Batch [300/693], Loss: 0.110211\n","Train Batch [310/693], Loss: 0.112821\n","Train Batch [320/693], Loss: 0.429069\n","Train Batch [330/693], Loss: 0.044430\n","Train Batch [340/693], Loss: 0.085280\n","Train Batch [350/693], Loss: 1.405999\n","Train Batch [360/693], Loss: 0.096763\n","Train Batch [370/693], Loss: 0.139435\n","Train Batch [380/693], Loss: 0.097190\n","Train Batch [390/693], Loss: 0.059075\n","Train Batch [400/693], Loss: 0.476029\n","Train Batch [410/693], Loss: 0.275600\n","Train Batch [420/693], Loss: 0.422597\n","Train Batch [430/693], Loss: 0.153029\n","Train Batch [440/693], Loss: 0.372607\n","Train Batch [450/693], Loss: 0.190596\n","Train Batch [460/693], Loss: 0.036343\n","Train Batch [470/693], Loss: 0.072322\n","Train Batch [480/693], Loss: 0.060372\n","Train Batch [490/693], Loss: 0.096679\n","Train Batch [500/693], Loss: 0.044615\n","Train Batch [510/693], Loss: 0.456524\n","Train Batch [520/693], Loss: 0.057072\n","Train Batch [530/693], Loss: 0.052152\n","Train Batch [540/693], Loss: 0.134192\n","Train Batch [550/693], Loss: 0.099297\n","Train Batch [560/693], Loss: 0.081713\n","Train Batch [570/693], Loss: 0.306212\n","Train Batch [580/693], Loss: 0.047344\n","Train Batch [590/693], Loss: 0.222190\n","Train Batch [600/693], Loss: 0.378563\n","Train Batch [610/693], Loss: 0.055158\n","Train Batch [620/693], Loss: 1.140343\n","Train Batch [630/693], Loss: 0.593853\n","Train Batch [640/693], Loss: 0.112555\n","Train Batch [650/693], Loss: 0.192756\n","Train Batch [660/693], Loss: 1.853173\n","Train Batch [670/693], Loss: 0.140375\n","Train Batch [680/693], Loss: 0.380004\n","Train Batch [690/693], Loss: 0.679707\n","Epoch [7/30]\n","Train Loss: 0.259949, Val Loss: 0.215645\n","LR: 1.00e-04\n","Epoch Time: 70.24s, Total Time: 8.28min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.215645\n","Train Batch [0/693], Loss: 0.515410\n","Train Batch [10/693], Loss: 0.044831\n","Train Batch [20/693], Loss: 1.006734\n","Train Batch [30/693], Loss: 0.170437\n","Train Batch [40/693], Loss: 0.240734\n","Train Batch [50/693], Loss: 0.056153\n","Train Batch [60/693], Loss: 1.089092\n","Train Batch [70/693], Loss: 0.082495\n","Train Batch [80/693], Loss: 0.051046\n","Train Batch [90/693], Loss: 0.047199\n","Train Batch [100/693], Loss: 0.091979\n","Train Batch [110/693], Loss: 0.161035\n","Train Batch [120/693], Loss: 0.069589\n","Train Batch [130/693], Loss: 0.459407\n","Train Batch [140/693], Loss: 0.511825\n","Train Batch [150/693], Loss: 0.151997\n","Train Batch [160/693], Loss: 0.385992\n","Train Batch [170/693], Loss: 0.176680\n","Train Batch [180/693], Loss: 0.159563\n","Train Batch [190/693], Loss: 0.097987\n","Train Batch [200/693], Loss: 0.161167\n","Train Batch [210/693], Loss: 0.073500\n","Train Batch [220/693], Loss: 0.077441\n","Train Batch [230/693], Loss: 0.583556\n","Train Batch [240/693], Loss: 0.095890\n","Train Batch [250/693], Loss: 0.975242\n","Train Batch [260/693], Loss: 0.068908\n","Train Batch [270/693], Loss: 0.088368\n","Train Batch [280/693], Loss: 0.126269\n","Train Batch [290/693], Loss: 0.086763\n","Train Batch [300/693], Loss: 0.114486\n","Train Batch [310/693], Loss: 0.067633\n","Train Batch [320/693], Loss: 0.119580\n","Train Batch [330/693], Loss: 0.238151\n","Train Batch [340/693], Loss: 0.491481\n","Train Batch [350/693], Loss: 0.056156\n","Train Batch [360/693], Loss: 0.071164\n","Train Batch [370/693], Loss: 0.094647\n","Train Batch [380/693], Loss: 0.094810\n","Train Batch [390/693], Loss: 0.132813\n","Train Batch [400/693], Loss: 0.081428\n","Train Batch [410/693], Loss: 0.392216\n","Train Batch [420/693], Loss: 0.134239\n","Train Batch [430/693], Loss: 0.203610\n","Train Batch [440/693], Loss: 0.035330\n","Train Batch [450/693], Loss: 0.675164\n","Train Batch [460/693], Loss: 0.058730\n","Train Batch [470/693], Loss: 0.525853\n","Train Batch [480/693], Loss: 0.502102\n","Train Batch [490/693], Loss: 0.211472\n","Train Batch [500/693], Loss: 0.152990\n","Train Batch [510/693], Loss: 0.101424\n","Train Batch [520/693], Loss: 0.095471\n","Train Batch [530/693], Loss: 0.121241\n","Train Batch [540/693], Loss: 0.479384\n","Train Batch [550/693], Loss: 0.434275\n","Train Batch [560/693], Loss: 0.042414\n","Train Batch [570/693], Loss: 0.206044\n","Train Batch [580/693], Loss: 0.439021\n","Train Batch [590/693], Loss: 0.037768\n","Train Batch [600/693], Loss: 0.111115\n","Train Batch [610/693], Loss: 0.103405\n","Train Batch [620/693], Loss: 0.058724\n","Train Batch [630/693], Loss: 0.056741\n","Train Batch [640/693], Loss: 0.051546\n","Train Batch [650/693], Loss: 0.145594\n","Train Batch [660/693], Loss: 0.425978\n","Train Batch [670/693], Loss: 0.122361\n","Train Batch [680/693], Loss: 0.118509\n","Train Batch [690/693], Loss: 0.278905\n","Epoch [8/30]\n","Train Loss: 0.251750, Val Loss: 0.207036\n","LR: 1.00e-04\n","Epoch Time: 70.13s, Total Time: 9.45min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.207036\n","Train Batch [0/693], Loss: 0.045317\n","Train Batch [10/693], Loss: 0.086328\n","Train Batch [20/693], Loss: 0.404070\n","Train Batch [30/693], Loss: 0.081559\n","Train Batch [40/693], Loss: 0.074828\n","Train Batch [50/693], Loss: 0.168466\n","Train Batch [60/693], Loss: 0.234668\n","Train Batch [70/693], Loss: 0.117614\n","Train Batch [80/693], Loss: 0.060706\n","Train Batch [90/693], Loss: 0.188418\n","Train Batch [100/693], Loss: 0.071218\n","Train Batch [110/693], Loss: 0.047033\n","Train Batch [120/693], Loss: 0.141391\n","Train Batch [130/693], Loss: 0.056603\n","Train Batch [140/693], Loss: 0.402242\n","Train Batch [150/693], Loss: 0.072687\n","Train Batch [160/693], Loss: 0.178984\n","Train Batch [170/693], Loss: 0.038450\n","Train Batch [180/693], Loss: 0.223930\n","Train Batch [190/693], Loss: 0.101800\n","Train Batch [200/693], Loss: 0.094901\n","Train Batch [210/693], Loss: 0.325094\n","Train Batch [220/693], Loss: 0.233933\n","Train Batch [230/693], Loss: 0.130672\n","Train Batch [240/693], Loss: 0.070705\n","Train Batch [250/693], Loss: 0.895051\n","Train Batch [260/693], Loss: 3.146505\n","Train Batch [270/693], Loss: 0.092613\n","Train Batch [280/693], Loss: 0.122044\n","Train Batch [290/693], Loss: 0.069649\n","Train Batch [300/693], Loss: 0.035696\n","Train Batch [310/693], Loss: 0.059090\n","Train Batch [320/693], Loss: 0.147634\n","Train Batch [330/693], Loss: 0.106547\n","Train Batch [340/693], Loss: 0.184498\n","Train Batch [350/693], Loss: 0.071623\n","Train Batch [360/693], Loss: 0.100874\n","Train Batch [370/693], Loss: 0.159324\n","Train Batch [380/693], Loss: 0.443692\n","Train Batch [390/693], Loss: 0.151578\n","Train Batch [400/693], Loss: 0.937570\n","Train Batch [410/693], Loss: 0.087534\n","Train Batch [420/693], Loss: 0.073809\n","Train Batch [430/693], Loss: 0.522503\n","Train Batch [440/693], Loss: 0.392252\n","Train Batch [450/693], Loss: 0.121013\n","Train Batch [460/693], Loss: 0.085523\n","Train Batch [470/693], Loss: 0.078834\n","Train Batch [480/693], Loss: 0.077596\n","Train Batch [490/693], Loss: 0.090969\n","Train Batch [500/693], Loss: 0.049031\n","Train Batch [510/693], Loss: 0.102924\n","Train Batch [520/693], Loss: 0.080092\n","Train Batch [530/693], Loss: 0.161784\n","Train Batch [540/693], Loss: 0.140090\n","Train Batch [550/693], Loss: 0.458370\n","Train Batch [560/693], Loss: 0.064230\n","Train Batch [570/693], Loss: 0.218880\n","Train Batch [580/693], Loss: 0.140328\n","Train Batch [590/693], Loss: 0.049864\n","Train Batch [600/693], Loss: 0.156787\n","Train Batch [610/693], Loss: 0.098386\n","Train Batch [620/693], Loss: 0.151805\n","Train Batch [630/693], Loss: 0.088648\n","Train Batch [640/693], Loss: 0.768885\n","Train Batch [650/693], Loss: 0.108848\n","Train Batch [660/693], Loss: 0.121901\n","Train Batch [670/693], Loss: 0.053679\n","Train Batch [680/693], Loss: 0.035978\n","Train Batch [690/693], Loss: 0.068180\n","Epoch [9/30]\n","Train Loss: 0.236879, Val Loss: 0.200968\n","LR: 1.00e-04\n","Epoch Time: 70.03s, Total Time: 10.61min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.200968\n","Train Batch [0/693], Loss: 0.414204\n","Train Batch [10/693], Loss: 0.121309\n","Train Batch [20/693], Loss: 0.080215\n","Train Batch [30/693], Loss: 0.332480\n","Train Batch [40/693], Loss: 0.500251\n","Train Batch [50/693], Loss: 1.531381\n","Train Batch [60/693], Loss: 0.079679\n","Train Batch [70/693], Loss: 0.175455\n","Train Batch [80/693], Loss: 0.143195\n","Train Batch [90/693], Loss: 0.304140\n","Train Batch [100/693], Loss: 0.225643\n","Train Batch [110/693], Loss: 0.218333\n","Train Batch [120/693], Loss: 0.154687\n","Train Batch [130/693], Loss: 0.274766\n","Train Batch [140/693], Loss: 1.124444\n","Train Batch [150/693], Loss: 0.256708\n","Train Batch [160/693], Loss: 0.106171\n","Train Batch [170/693], Loss: 0.789928\n","Train Batch [180/693], Loss: 0.118397\n","Train Batch [190/693], Loss: 0.056637\n","Train Batch [200/693], Loss: 0.062032\n","Train Batch [210/693], Loss: 0.309935\n","Train Batch [220/693], Loss: 0.167624\n","Train Batch [230/693], Loss: 0.391793\n","Train Batch [240/693], Loss: 0.121559\n","Train Batch [250/693], Loss: 0.160811\n","Train Batch [260/693], Loss: 0.160805\n","Train Batch [270/693], Loss: 0.093959\n","Train Batch [280/693], Loss: 0.566284\n","Train Batch [290/693], Loss: 0.442204\n","Train Batch [300/693], Loss: 0.193993\n","Train Batch [310/693], Loss: 0.094356\n","Train Batch [320/693], Loss: 1.196835\n","Train Batch [330/693], Loss: 0.100957\n","Train Batch [340/693], Loss: 0.257407\n","Train Batch [350/693], Loss: 0.106666\n","Train Batch [360/693], Loss: 0.679619\n","Train Batch [370/693], Loss: 0.065531\n","Train Batch [380/693], Loss: 0.314692\n","Train Batch [390/693], Loss: 0.053957\n","Train Batch [400/693], Loss: 0.417085\n","Train Batch [410/693], Loss: 0.911233\n","Train Batch [420/693], Loss: 0.127501\n","Train Batch [430/693], Loss: 0.334939\n","Train Batch [440/693], Loss: 0.420772\n","Train Batch [450/693], Loss: 0.395287\n","Train Batch [460/693], Loss: 0.074553\n","Train Batch [470/693], Loss: 0.083960\n","Train Batch [480/693], Loss: 0.091035\n","Train Batch [490/693], Loss: 0.094682\n","Train Batch [500/693], Loss: 0.324505\n","Train Batch [510/693], Loss: 0.253130\n","Train Batch [520/693], Loss: 0.194831\n","Train Batch [530/693], Loss: 0.099997\n","Train Batch [540/693], Loss: 0.278435\n","Train Batch [550/693], Loss: 0.092565\n","Train Batch [560/693], Loss: 0.065711\n","Train Batch [570/693], Loss: 0.063812\n","Train Batch [580/693], Loss: 4.033146\n","Train Batch [590/693], Loss: 0.348893\n","Train Batch [600/693], Loss: 0.252899\n","Train Batch [610/693], Loss: 0.106516\n","Train Batch [620/693], Loss: 0.088468\n","Train Batch [630/693], Loss: 0.481043\n","Train Batch [640/693], Loss: 0.120985\n","Train Batch [650/693], Loss: 0.089865\n","Train Batch [660/693], Loss: 0.082686\n","Train Batch [670/693], Loss: 0.167683\n","Train Batch [680/693], Loss: 0.887776\n","Train Batch [690/693], Loss: 0.385419\n","Epoch [10/30]\n","Train Loss: 0.238502, Val Loss: 0.203415\n","LR: 1.00e-04\n","Epoch Time: 70.18s, Total Time: 11.79min\n","--------------------------------------------------\n","✓ Checkpoint saved at epoch 10\n","Train Batch [0/693], Loss: 0.072090\n","Train Batch [10/693], Loss: 0.453394\n","Train Batch [20/693], Loss: 0.124054\n","Train Batch [30/693], Loss: 0.454142\n","Train Batch [40/693], Loss: 1.159420\n","Train Batch [50/693], Loss: 0.140404\n","Train Batch [60/693], Loss: 0.600219\n","Train Batch [70/693], Loss: 0.082687\n","Train Batch [80/693], Loss: 0.065052\n","Train Batch [90/693], Loss: 0.384332\n","Train Batch [100/693], Loss: 0.129384\n","Train Batch [110/693], Loss: 0.339849\n","Train Batch [120/693], Loss: 0.078769\n","Train Batch [130/693], Loss: 1.536516\n","Train Batch [140/693], Loss: 0.250805\n","Train Batch [150/693], Loss: 0.125779\n","Train Batch [160/693], Loss: 0.167279\n","Train Batch [170/693], Loss: 0.224037\n","Train Batch [180/693], Loss: 0.065885\n","Train Batch [190/693], Loss: 0.118881\n","Train Batch [200/693], Loss: 0.254740\n","Train Batch [210/693], Loss: 0.955600\n","Train Batch [220/693], Loss: 0.070764\n","Train Batch [230/693], Loss: 0.120876\n","Train Batch [240/693], Loss: 0.081417\n","Train Batch [250/693], Loss: 0.290920\n","Train Batch [260/693], Loss: 0.049950\n","Train Batch [270/693], Loss: 0.147559\n","Train Batch [280/693], Loss: 0.078505\n","Train Batch [290/693], Loss: 0.053471\n","Train Batch [300/693], Loss: 0.057021\n","Train Batch [310/693], Loss: 0.079303\n","Train Batch [320/693], Loss: 0.219491\n","Train Batch [330/693], Loss: 0.053816\n","Train Batch [340/693], Loss: 0.027172\n","Train Batch [350/693], Loss: 0.499111\n","Train Batch [360/693], Loss: 0.198264\n","Train Batch [370/693], Loss: 0.043999\n","Train Batch [380/693], Loss: 0.493491\n","Train Batch [390/693], Loss: 0.204559\n","Train Batch [400/693], Loss: 0.359492\n","Train Batch [410/693], Loss: 0.331088\n","Train Batch [420/693], Loss: 0.259616\n","Train Batch [430/693], Loss: 0.076094\n","Train Batch [440/693], Loss: 0.076271\n","Train Batch [450/693], Loss: 0.140912\n","Train Batch [460/693], Loss: 0.043729\n","Train Batch [470/693], Loss: 1.641377\n","Train Batch [480/693], Loss: 1.170424\n","Train Batch [490/693], Loss: 0.071553\n","Train Batch [500/693], Loss: 0.085922\n","Train Batch [510/693], Loss: 0.499901\n","Train Batch [520/693], Loss: 0.081816\n","Train Batch [530/693], Loss: 0.117615\n","Train Batch [540/693], Loss: 0.108940\n","Train Batch [550/693], Loss: 0.113144\n","Train Batch [560/693], Loss: 0.051035\n","Train Batch [570/693], Loss: 0.172225\n","Train Batch [580/693], Loss: 0.081146\n","Train Batch [590/693], Loss: 0.170337\n","Train Batch [600/693], Loss: 0.153521\n","Train Batch [610/693], Loss: 0.069295\n","Train Batch [620/693], Loss: 0.085582\n","Train Batch [630/693], Loss: 0.051977\n","Train Batch [640/693], Loss: 0.280977\n","Train Batch [650/693], Loss: 0.646063\n","Train Batch [660/693], Loss: 0.099912\n","Train Batch [670/693], Loss: 0.250442\n","Train Batch [680/693], Loss: 0.291720\n","Train Batch [690/693], Loss: 0.283523\n","Epoch [11/30]\n","Train Loss: 0.226064, Val Loss: 0.183253\n","LR: 1.00e-04\n","Epoch Time: 70.23s, Total Time: 12.97min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.183253\n","Train Batch [0/693], Loss: 0.387385\n","Train Batch [10/693], Loss: 0.102174\n","Train Batch [20/693], Loss: 0.089108\n","Train Batch [30/693], Loss: 0.080680\n","Train Batch [40/693], Loss: 0.155970\n","Train Batch [50/693], Loss: 0.119709\n","Train Batch [60/693], Loss: 0.366398\n","Train Batch [70/693], Loss: 0.360847\n","Train Batch [80/693], Loss: 0.341985\n","Train Batch [90/693], Loss: 0.098742\n","Train Batch [100/693], Loss: 0.132405\n","Train Batch [110/693], Loss: 0.147028\n","Train Batch [120/693], Loss: 0.093356\n","Train Batch [130/693], Loss: 0.043282\n","Train Batch [140/693], Loss: 0.231092\n","Train Batch [150/693], Loss: 0.071457\n","Train Batch [160/693], Loss: 0.076106\n","Train Batch [170/693], Loss: 0.065063\n","Train Batch [180/693], Loss: 0.113089\n","Train Batch [190/693], Loss: 0.082623\n","Train Batch [200/693], Loss: 0.325696\n","Train Batch [210/693], Loss: 0.228854\n","Train Batch [220/693], Loss: 0.505572\n","Train Batch [230/693], Loss: 0.165055\n","Train Batch [240/693], Loss: 0.523108\n","Train Batch [250/693], Loss: 0.072446\n","Train Batch [260/693], Loss: 0.101240\n","Train Batch [270/693], Loss: 0.585006\n","Train Batch [280/693], Loss: 0.097996\n","Train Batch [290/693], Loss: 0.172317\n","Train Batch [300/693], Loss: 0.050847\n","Train Batch [310/693], Loss: 0.386004\n","Train Batch [320/693], Loss: 0.042264\n","Train Batch [330/693], Loss: 0.090605\n","Train Batch [340/693], Loss: 0.086021\n","Train Batch [350/693], Loss: 0.136092\n","Train Batch [360/693], Loss: 0.157639\n","Train Batch [370/693], Loss: 0.049890\n","Train Batch [380/693], Loss: 0.359596\n","Train Batch [390/693], Loss: 0.038765\n","Train Batch [400/693], Loss: 0.182745\n","Train Batch [410/693], Loss: 0.043564\n","Train Batch [420/693], Loss: 0.071659\n","Train Batch [430/693], Loss: 0.251590\n","Train Batch [440/693], Loss: 0.049769\n","Train Batch [450/693], Loss: 0.046206\n","Train Batch [460/693], Loss: 0.172873\n","Train Batch [470/693], Loss: 0.059064\n","Train Batch [480/693], Loss: 0.076209\n","Train Batch [490/693], Loss: 0.133449\n","Train Batch [500/693], Loss: 0.251933\n","Train Batch [510/693], Loss: 0.212300\n","Train Batch [520/693], Loss: 0.461346\n","Train Batch [530/693], Loss: 0.084660\n","Train Batch [540/693], Loss: 0.472333\n","Train Batch [550/693], Loss: 0.039037\n","Train Batch [560/693], Loss: 0.489262\n","Train Batch [570/693], Loss: 0.093388\n","Train Batch [580/693], Loss: 0.042238\n","Train Batch [590/693], Loss: 0.087333\n","Train Batch [600/693], Loss: 0.430138\n","Train Batch [610/693], Loss: 0.043805\n","Train Batch [620/693], Loss: 0.688644\n","Train Batch [630/693], Loss: 0.055587\n","Train Batch [640/693], Loss: 0.109163\n","Train Batch [650/693], Loss: 0.430226\n","Train Batch [660/693], Loss: 0.088722\n","Train Batch [670/693], Loss: 0.205363\n","Train Batch [680/693], Loss: 0.184614\n","Train Batch [690/693], Loss: 0.270327\n","Epoch [12/30]\n","Train Loss: 0.214703, Val Loss: 0.187609\n","LR: 1.00e-04\n","Epoch Time: 70.20s, Total Time: 14.15min\n","--------------------------------------------------\n","Train Batch [0/693], Loss: 0.075973\n","Train Batch [10/693], Loss: 0.163663\n","Train Batch [20/693], Loss: 0.045502\n","Train Batch [30/693], Loss: 0.143018\n","Train Batch [40/693], Loss: 0.043818\n","Train Batch [50/693], Loss: 0.185656\n","Train Batch [60/693], Loss: 0.342708\n","Train Batch [70/693], Loss: 0.228325\n","Train Batch [80/693], Loss: 0.220023\n","Train Batch [90/693], Loss: 0.066272\n","Train Batch [100/693], Loss: 0.053276\n","Train Batch [110/693], Loss: 0.048659\n","Train Batch [120/693], Loss: 0.146062\n","Train Batch [130/693], Loss: 0.038951\n","Train Batch [140/693], Loss: 0.098085\n","Train Batch [150/693], Loss: 2.023480\n","Train Batch [160/693], Loss: 0.092311\n","Train Batch [170/693], Loss: 0.220071\n","Train Batch [180/693], Loss: 0.402885\n","Train Batch [190/693], Loss: 0.677036\n","Train Batch [200/693], Loss: 0.122866\n","Train Batch [210/693], Loss: 0.092793\n","Train Batch [220/693], Loss: 0.037563\n","Train Batch [230/693], Loss: 0.090697\n","Train Batch [240/693], Loss: 0.035956\n","Train Batch [250/693], Loss: 0.089888\n","Train Batch [260/693], Loss: 0.092870\n","Train Batch [270/693], Loss: 0.031305\n","Train Batch [280/693], Loss: 0.131734\n","Train Batch [290/693], Loss: 0.057135\n","Train Batch [300/693], Loss: 0.180556\n","Train Batch [310/693], Loss: 0.122541\n","Train Batch [320/693], Loss: 0.465175\n","Train Batch [330/693], Loss: 0.141931\n","Train Batch [340/693], Loss: 0.085911\n","Train Batch [350/693], Loss: 0.057946\n","Train Batch [360/693], Loss: 0.076449\n","Train Batch [370/693], Loss: 0.437967\n","Train Batch [380/693], Loss: 0.272804\n","Train Batch [390/693], Loss: 0.336570\n","Train Batch [400/693], Loss: 0.054960\n","Train Batch [410/693], Loss: 0.052664\n","Train Batch [420/693], Loss: 0.329514\n","Train Batch [430/693], Loss: 0.092584\n","Train Batch [440/693], Loss: 0.283952\n","Train Batch [450/693], Loss: 1.133418\n","Train Batch [460/693], Loss: 0.234605\n","Train Batch [470/693], Loss: 0.357907\n","Train Batch [480/693], Loss: 0.193926\n","Train Batch [490/693], Loss: 0.088583\n","Train Batch [500/693], Loss: 0.189435\n","Train Batch [510/693], Loss: 0.078827\n","Train Batch [520/693], Loss: 0.585901\n","Train Batch [530/693], Loss: 0.077434\n","Train Batch [540/693], Loss: 0.271412\n","Train Batch [550/693], Loss: 0.059291\n","Train Batch [560/693], Loss: 0.065566\n","Train Batch [570/693], Loss: 0.069753\n","Train Batch [580/693], Loss: 0.363434\n","Train Batch [590/693], Loss: 0.115128\n","Train Batch [600/693], Loss: 0.500653\n","Train Batch [610/693], Loss: 0.082795\n","Train Batch [620/693], Loss: 0.874730\n","Train Batch [630/693], Loss: 0.072221\n","Train Batch [640/693], Loss: 0.064437\n","Train Batch [650/693], Loss: 0.173852\n","Train Batch [660/693], Loss: 0.464377\n","Train Batch [670/693], Loss: 0.231073\n","Train Batch [680/693], Loss: 0.191459\n","Train Batch [690/693], Loss: 0.266260\n","Epoch [13/30]\n","Train Loss: 0.210688, Val Loss: 0.183448\n","LR: 1.00e-04\n","Epoch Time: 70.25s, Total Time: 15.32min\n","--------------------------------------------------\n","Train Batch [0/693], Loss: 0.500366\n","Train Batch [10/693], Loss: 0.116827\n","Train Batch [20/693], Loss: 0.195876\n","Train Batch [30/693], Loss: 0.041018\n","Train Batch [40/693], Loss: 0.328444\n","Train Batch [50/693], Loss: 0.038714\n","Train Batch [60/693], Loss: 0.040014\n","Train Batch [70/693], Loss: 0.203389\n","Train Batch [80/693], Loss: 0.127846\n","Train Batch [90/693], Loss: 0.056050\n","Train Batch [100/693], Loss: 0.344352\n","Train Batch [110/693], Loss: 0.049087\n","Train Batch [120/693], Loss: 0.041575\n","Train Batch [130/693], Loss: 0.115665\n","Train Batch [140/693], Loss: 0.033393\n","Train Batch [150/693], Loss: 0.110150\n","Train Batch [160/693], Loss: 0.124257\n","Train Batch [170/693], Loss: 0.162210\n","Train Batch [180/693], Loss: 0.712699\n","Train Batch [190/693], Loss: 0.050955\n","Train Batch [200/693], Loss: 0.039785\n","Train Batch [210/693], Loss: 0.301846\n","Train Batch [220/693], Loss: 0.256854\n","Train Batch [230/693], Loss: 0.246877\n","Train Batch [240/693], Loss: 0.098099\n","Train Batch [250/693], Loss: 0.082683\n","Train Batch [260/693], Loss: 0.197142\n","Train Batch [270/693], Loss: 0.066431\n","Train Batch [280/693], Loss: 0.265407\n","Train Batch [290/693], Loss: 0.076446\n","Train Batch [300/693], Loss: 0.055330\n","Train Batch [310/693], Loss: 0.080359\n","Train Batch [320/693], Loss: 0.074152\n","Train Batch [330/693], Loss: 0.936148\n","Train Batch [340/693], Loss: 0.053833\n","Train Batch [350/693], Loss: 0.293040\n","Train Batch [360/693], Loss: 0.146692\n","Train Batch [370/693], Loss: 0.069516\n","Train Batch [380/693], Loss: 0.204895\n","Train Batch [390/693], Loss: 0.097502\n","Train Batch [400/693], Loss: 0.149999\n","Train Batch [410/693], Loss: 0.063994\n","Train Batch [420/693], Loss: 0.384088\n","Train Batch [430/693], Loss: 0.117885\n","Train Batch [440/693], Loss: 0.044827\n","Train Batch [450/693], Loss: 0.189602\n","Train Batch [460/693], Loss: 0.199428\n","Train Batch [470/693], Loss: 0.045177\n","Train Batch [480/693], Loss: 0.175346\n","Train Batch [490/693], Loss: 0.045140\n","Train Batch [500/693], Loss: 0.032743\n","Train Batch [510/693], Loss: 0.088970\n","Train Batch [520/693], Loss: 0.328260\n","Train Batch [530/693], Loss: 0.150553\n","Train Batch [540/693], Loss: 0.179282\n","Train Batch [550/693], Loss: 0.060303\n","Train Batch [560/693], Loss: 0.105143\n","Train Batch [570/693], Loss: 0.038417\n","Train Batch [580/693], Loss: 0.164426\n","Train Batch [590/693], Loss: 0.117803\n","Train Batch [600/693], Loss: 0.350368\n","Train Batch [610/693], Loss: 0.145982\n","Train Batch [620/693], Loss: 0.070852\n","Train Batch [630/693], Loss: 0.040194\n","Train Batch [640/693], Loss: 0.081099\n","Train Batch [650/693], Loss: 0.262307\n","Train Batch [660/693], Loss: 0.128574\n","Train Batch [670/693], Loss: 0.036684\n","Train Batch [680/693], Loss: 0.171511\n","Train Batch [690/693], Loss: 0.060876\n","Epoch [14/30]\n","Train Loss: 0.204706, Val Loss: 0.180857\n","LR: 1.00e-04\n","Epoch Time: 70.39s, Total Time: 16.49min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.180857\n","Train Batch [0/693], Loss: 0.170621\n","Train Batch [10/693], Loss: 0.103706\n","Train Batch [20/693], Loss: 0.263326\n","Train Batch [30/693], Loss: 0.072563\n","Train Batch [40/693], Loss: 0.104596\n","Train Batch [50/693], Loss: 0.101054\n","Train Batch [60/693], Loss: 0.176704\n","Train Batch [70/693], Loss: 0.727283\n","Train Batch [80/693], Loss: 0.033362\n","Train Batch [90/693], Loss: 0.059930\n","Train Batch [100/693], Loss: 0.206014\n","Train Batch [110/693], Loss: 0.088889\n","Train Batch [120/693], Loss: 0.156801\n","Train Batch [130/693], Loss: 0.339597\n","Train Batch [140/693], Loss: 0.260159\n","Train Batch [150/693], Loss: 0.048094\n","Train Batch [160/693], Loss: 0.053913\n","Train Batch [170/693], Loss: 0.094451\n","Train Batch [180/693], Loss: 0.342282\n","Train Batch [190/693], Loss: 0.055536\n","Train Batch [200/693], Loss: 0.283471\n","Train Batch [210/693], Loss: 0.486453\n","Train Batch [220/693], Loss: 0.394250\n","Train Batch [230/693], Loss: 0.536986\n","Train Batch [240/693], Loss: 0.197672\n","Train Batch [250/693], Loss: 0.175091\n","Train Batch [260/693], Loss: 1.740583\n","Train Batch [270/693], Loss: 0.099026\n","Train Batch [280/693], Loss: 0.300597\n","Train Batch [290/693], Loss: 0.370767\n","Train Batch [300/693], Loss: 0.079674\n","Train Batch [310/693], Loss: 0.104629\n","Train Batch [320/693], Loss: 0.358421\n","Train Batch [330/693], Loss: 0.119075\n","Train Batch [340/693], Loss: 0.245450\n","Train Batch [350/693], Loss: 0.101179\n","Train Batch [360/693], Loss: 0.045668\n","Train Batch [370/693], Loss: 0.033128\n","Train Batch [380/693], Loss: 0.073852\n","Train Batch [390/693], Loss: 0.055512\n","Train Batch [400/693], Loss: 0.075915\n","Train Batch [410/693], Loss: 0.186485\n","Train Batch [420/693], Loss: 0.241954\n","Train Batch [430/693], Loss: 0.198788\n","Train Batch [440/693], Loss: 0.310822\n","Train Batch [450/693], Loss: 0.090966\n","Train Batch [460/693], Loss: 0.159011\n","Train Batch [470/693], Loss: 0.058741\n","Train Batch [480/693], Loss: 0.060172\n","Train Batch [490/693], Loss: 0.071927\n","Train Batch [500/693], Loss: 0.056368\n","Train Batch [510/693], Loss: 0.314753\n","Train Batch [520/693], Loss: 0.063552\n","Train Batch [530/693], Loss: 0.102163\n","Train Batch [540/693], Loss: 0.130413\n","Train Batch [550/693], Loss: 0.200482\n","Train Batch [560/693], Loss: 0.047589\n","Train Batch [570/693], Loss: 0.100201\n","Train Batch [580/693], Loss: 0.098716\n","Train Batch [590/693], Loss: 0.072795\n","Train Batch [600/693], Loss: 0.233751\n","Train Batch [610/693], Loss: 0.053410\n","Train Batch [620/693], Loss: 0.204381\n","Train Batch [630/693], Loss: 0.081880\n","Train Batch [640/693], Loss: 0.179672\n","Train Batch [650/693], Loss: 0.067296\n","Train Batch [660/693], Loss: 0.745689\n","Train Batch [670/693], Loss: 0.145528\n","Train Batch [680/693], Loss: 0.077957\n","Train Batch [690/693], Loss: 0.136554\n","Epoch [15/30]\n","Train Loss: 0.194473, Val Loss: 0.187095\n","LR: 1.00e-04\n","Epoch Time: 70.33s, Total Time: 17.66min\n","--------------------------------------------------\n","Train Batch [0/693], Loss: 1.114539\n","Train Batch [10/693], Loss: 0.100881\n","Train Batch [20/693], Loss: 0.056681\n","Train Batch [30/693], Loss: 0.046096\n","Train Batch [40/693], Loss: 0.078824\n","Train Batch [50/693], Loss: 0.030025\n","Train Batch [60/693], Loss: 0.171337\n","Train Batch [70/693], Loss: 0.065630\n","Train Batch [80/693], Loss: 0.343057\n","Train Batch [90/693], Loss: 0.160958\n","Train Batch [100/693], Loss: 0.195581\n","Train Batch [110/693], Loss: 0.062103\n","Train Batch [120/693], Loss: 0.660345\n","Train Batch [130/693], Loss: 0.314145\n","Train Batch [140/693], Loss: 0.281261\n","Train Batch [150/693], Loss: 0.215275\n","Train Batch [160/693], Loss: 0.259111\n","Train Batch [170/693], Loss: 0.063556\n","Train Batch [180/693], Loss: 0.052859\n","Train Batch [190/693], Loss: 0.075057\n","Train Batch [200/693], Loss: 0.192721\n","Train Batch [210/693], Loss: 0.125357\n","Train Batch [220/693], Loss: 0.052923\n","Train Batch [230/693], Loss: 0.139146\n","Train Batch [240/693], Loss: 0.217397\n","Train Batch [250/693], Loss: 0.105226\n","Train Batch [260/693], Loss: 0.026726\n","Train Batch [270/693], Loss: 0.071059\n","Train Batch [280/693], Loss: 0.059320\n","Train Batch [290/693], Loss: 0.301397\n","Train Batch [300/693], Loss: 0.026441\n","Train Batch [310/693], Loss: 0.089852\n","Train Batch [320/693], Loss: 0.079394\n","Train Batch [330/693], Loss: 0.056144\n","Train Batch [340/693], Loss: 0.075385\n","Train Batch [350/693], Loss: 0.519256\n","Train Batch [360/693], Loss: 0.070371\n","Train Batch [370/693], Loss: 0.039033\n","Train Batch [380/693], Loss: 0.090451\n","Train Batch [390/693], Loss: 0.130267\n","Train Batch [400/693], Loss: 0.074542\n","Train Batch [410/693], Loss: 0.578470\n","Train Batch [420/693], Loss: 0.075922\n","Train Batch [430/693], Loss: 0.079907\n","Train Batch [440/693], Loss: 0.041608\n","Train Batch [450/693], Loss: 0.112323\n","Train Batch [460/693], Loss: 0.082630\n","Train Batch [470/693], Loss: 0.174258\n","Train Batch [480/693], Loss: 0.207610\n","Train Batch [490/693], Loss: 0.223347\n","Train Batch [500/693], Loss: 0.048095\n","Train Batch [510/693], Loss: 0.590635\n","Train Batch [520/693], Loss: 0.306142\n","Train Batch [530/693], Loss: 0.074366\n","Train Batch [540/693], Loss: 0.062777\n","Train Batch [550/693], Loss: 0.326015\n","Train Batch [560/693], Loss: 4.060666\n","Train Batch [570/693], Loss: 0.379154\n","Train Batch [580/693], Loss: 0.054266\n","Train Batch [590/693], Loss: 0.067792\n","Train Batch [600/693], Loss: 0.468420\n","Train Batch [610/693], Loss: 0.264956\n","Train Batch [620/693], Loss: 0.427612\n","Train Batch [630/693], Loss: 0.075145\n","Train Batch [640/693], Loss: 0.081671\n","Train Batch [650/693], Loss: 0.133044\n","Train Batch [660/693], Loss: 0.226811\n","Train Batch [670/693], Loss: 0.104011\n","Train Batch [680/693], Loss: 0.406282\n","Train Batch [690/693], Loss: 0.120485\n","Epoch [16/30]\n","Train Loss: 0.192497, Val Loss: 0.164825\n","LR: 1.00e-04\n","Epoch Time: 70.29s, Total Time: 18.84min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.164825\n","Train Batch [0/693], Loss: 0.066426\n","Train Batch [10/693], Loss: 0.055791\n","Train Batch [20/693], Loss: 0.024841\n","Train Batch [30/693], Loss: 0.324196\n","Train Batch [40/693], Loss: 0.108310\n","Train Batch [50/693], Loss: 0.263491\n","Train Batch [60/693], Loss: 0.034781\n","Train Batch [70/693], Loss: 0.407840\n","Train Batch [80/693], Loss: 0.075536\n","Train Batch [90/693], Loss: 2.964274\n","Train Batch [100/693], Loss: 0.050159\n","Train Batch [110/693], Loss: 0.067164\n","Train Batch [120/693], Loss: 0.232776\n","Train Batch [130/693], Loss: 0.175956\n","Train Batch [140/693], Loss: 0.252824\n","Train Batch [150/693], Loss: 0.046441\n","Train Batch [160/693], Loss: 0.044233\n","Train Batch [170/693], Loss: 0.063326\n","Train Batch [180/693], Loss: 0.172172\n","Train Batch [190/693], Loss: 0.066971\n","Train Batch [200/693], Loss: 0.105591\n","Train Batch [210/693], Loss: 0.678211\n","Train Batch [220/693], Loss: 0.044147\n","Train Batch [230/693], Loss: 0.054477\n","Train Batch [240/693], Loss: 0.554144\n","Train Batch [250/693], Loss: 0.063089\n","Train Batch [260/693], Loss: 0.262554\n","Train Batch [270/693], Loss: 0.092050\n","Train Batch [280/693], Loss: 0.453723\n","Train Batch [290/693], Loss: 0.214856\n","Train Batch [300/693], Loss: 0.068710\n","Train Batch [310/693], Loss: 0.286220\n","Train Batch [320/693], Loss: 0.411920\n","Train Batch [330/693], Loss: 0.092842\n","Train Batch [340/693], Loss: 0.086914\n","Train Batch [350/693], Loss: 2.225051\n","Train Batch [360/693], Loss: 0.129396\n","Train Batch [370/693], Loss: 0.065087\n","Train Batch [380/693], Loss: 0.204153\n","Train Batch [390/693], Loss: 0.287170\n","Train Batch [400/693], Loss: 0.336476\n","Train Batch [410/693], Loss: 0.101034\n","Train Batch [420/693], Loss: 0.111298\n","Train Batch [430/693], Loss: 0.483809\n","Train Batch [440/693], Loss: 0.253128\n","Train Batch [450/693], Loss: 0.080198\n","Train Batch [460/693], Loss: 0.050706\n","Train Batch [470/693], Loss: 0.040601\n","Train Batch [480/693], Loss: 0.042909\n","Train Batch [490/693], Loss: 0.104979\n","Train Batch [500/693], Loss: 0.059343\n","Train Batch [510/693], Loss: 0.063841\n","Train Batch [520/693], Loss: 0.064217\n","Train Batch [530/693], Loss: 0.154230\n","Train Batch [540/693], Loss: 0.045794\n","Train Batch [550/693], Loss: 0.043695\n","Train Batch [560/693], Loss: 0.024185\n","Train Batch [570/693], Loss: 0.056560\n","Train Batch [580/693], Loss: 0.302568\n","Train Batch [590/693], Loss: 0.162263\n","Train Batch [600/693], Loss: 0.025677\n","Train Batch [610/693], Loss: 0.665774\n","Train Batch [620/693], Loss: 0.191746\n","Train Batch [630/693], Loss: 0.709181\n","Train Batch [640/693], Loss: 0.040234\n","Train Batch [650/693], Loss: 0.155314\n","Train Batch [660/693], Loss: 0.032481\n","Train Batch [670/693], Loss: 0.040460\n","Train Batch [680/693], Loss: 0.023946\n","Train Batch [690/693], Loss: 0.361906\n","Epoch [17/30]\n","Train Loss: 0.188276, Val Loss: 0.164060\n","LR: 1.00e-04\n","Epoch Time: 70.23s, Total Time: 20.01min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.164060\n","Train Batch [0/693], Loss: 0.043782\n","Train Batch [10/693], Loss: 0.218913\n","Train Batch [20/693], Loss: 0.486624\n","Train Batch [30/693], Loss: 0.114316\n","Train Batch [40/693], Loss: 0.148612\n","Train Batch [50/693], Loss: 0.066341\n","Train Batch [60/693], Loss: 0.091048\n","Train Batch [70/693], Loss: 0.108679\n","Train Batch [80/693], Loss: 0.119692\n","Train Batch [90/693], Loss: 0.147927\n","Train Batch [100/693], Loss: 0.142298\n","Train Batch [110/693], Loss: 0.110566\n","Train Batch [120/693], Loss: 0.544715\n","Train Batch [130/693], Loss: 0.039122\n","Train Batch [140/693], Loss: 0.179026\n","Train Batch [150/693], Loss: 0.053626\n","Train Batch [160/693], Loss: 0.159709\n","Train Batch [170/693], Loss: 0.090951\n","Train Batch [180/693], Loss: 0.038153\n","Train Batch [190/693], Loss: 0.050315\n","Train Batch [200/693], Loss: 0.101197\n","Train Batch [210/693], Loss: 0.086930\n","Train Batch [220/693], Loss: 0.037067\n","Train Batch [230/693], Loss: 0.225751\n","Train Batch [240/693], Loss: 0.045011\n","Train Batch [250/693], Loss: 0.054409\n","Train Batch [260/693], Loss: 0.241828\n","Train Batch [270/693], Loss: 0.058460\n","Train Batch [280/693], Loss: 0.198022\n","Train Batch [290/693], Loss: 0.228827\n","Train Batch [300/693], Loss: 0.054971\n","Train Batch [310/693], Loss: 0.048376\n","Train Batch [320/693], Loss: 0.050162\n","Train Batch [330/693], Loss: 0.070420\n","Train Batch [340/693], Loss: 0.115627\n","Train Batch [350/693], Loss: 0.029532\n","Train Batch [360/693], Loss: 0.047337\n","Train Batch [370/693], Loss: 0.072103\n","Train Batch [380/693], Loss: 0.310886\n","Train Batch [390/693], Loss: 0.191412\n","Train Batch [400/693], Loss: 0.072875\n","Train Batch [410/693], Loss: 0.042550\n","Train Batch [420/693], Loss: 0.131263\n","Train Batch [430/693], Loss: 0.116102\n","Train Batch [440/693], Loss: 0.104291\n","Train Batch [450/693], Loss: 0.058438\n","Train Batch [460/693], Loss: 0.037983\n","Train Batch [470/693], Loss: 0.100683\n","Train Batch [480/693], Loss: 0.148277\n","Train Batch [490/693], Loss: 0.125155\n","Train Batch [500/693], Loss: 0.033235\n","Train Batch [510/693], Loss: 2.910025\n","Train Batch [520/693], Loss: 0.051450\n","Train Batch [530/693], Loss: 0.489766\n","Train Batch [540/693], Loss: 0.028739\n","Train Batch [550/693], Loss: 0.087152\n","Train Batch [560/693], Loss: 0.415091\n","Train Batch [570/693], Loss: 0.174099\n","Train Batch [580/693], Loss: 0.161231\n","Train Batch [590/693], Loss: 0.041852\n","Train Batch [600/693], Loss: 0.374355\n","Train Batch [610/693], Loss: 0.048666\n","Train Batch [620/693], Loss: 0.355393\n","Train Batch [630/693], Loss: 0.091556\n","Train Batch [640/693], Loss: 0.035138\n","Train Batch [650/693], Loss: 0.128382\n","Train Batch [660/693], Loss: 0.033575\n","Train Batch [670/693], Loss: 0.108593\n","Train Batch [680/693], Loss: 0.125073\n","Train Batch [690/693], Loss: 0.107934\n","Epoch [18/30]\n","Train Loss: 0.176810, Val Loss: 0.164559\n","LR: 1.00e-04\n","Epoch Time: 70.00s, Total Time: 21.18min\n","--------------------------------------------------\n","Train Batch [0/693], Loss: 0.078400\n","Train Batch [10/693], Loss: 0.056548\n","Train Batch [20/693], Loss: 0.077740\n","Train Batch [30/693], Loss: 0.081535\n","Train Batch [40/693], Loss: 0.063849\n","Train Batch [50/693], Loss: 0.072991\n","Train Batch [60/693], Loss: 0.119505\n","Train Batch [70/693], Loss: 0.294153\n","Train Batch [80/693], Loss: 0.120401\n","Train Batch [90/693], Loss: 0.040028\n","Train Batch [100/693], Loss: 0.081774\n","Train Batch [110/693], Loss: 0.379620\n","Train Batch [120/693], Loss: 0.312360\n","Train Batch [130/693], Loss: 0.041121\n","Train Batch [140/693], Loss: 0.074881\n","Train Batch [150/693], Loss: 0.212093\n","Train Batch [160/693], Loss: 0.034271\n","Train Batch [170/693], Loss: 0.028049\n","Train Batch [180/693], Loss: 0.044553\n","Train Batch [190/693], Loss: 0.037685\n","Train Batch [200/693], Loss: 0.136076\n","Train Batch [210/693], Loss: 0.255529\n","Train Batch [220/693], Loss: 0.219771\n","Train Batch [230/693], Loss: 0.155032\n","Train Batch [240/693], Loss: 0.279213\n","Train Batch [250/693], Loss: 0.057773\n","Train Batch [260/693], Loss: 0.203524\n","Train Batch [270/693], Loss: 0.102775\n","Train Batch [280/693], Loss: 0.041396\n","Train Batch [290/693], Loss: 0.051478\n","Train Batch [300/693], Loss: 0.032089\n","Train Batch [310/693], Loss: 0.172468\n","Train Batch [320/693], Loss: 0.067751\n","Train Batch [330/693], Loss: 0.142647\n","Train Batch [340/693], Loss: 0.068069\n","Train Batch [350/693], Loss: 0.151251\n","Train Batch [360/693], Loss: 0.093642\n","Train Batch [370/693], Loss: 0.044199\n","Train Batch [380/693], Loss: 0.050139\n","Train Batch [390/693], Loss: 0.353934\n","Train Batch [400/693], Loss: 0.083978\n","Train Batch [410/693], Loss: 0.048318\n","Train Batch [420/693], Loss: 0.377322\n","Train Batch [430/693], Loss: 0.078010\n","Train Batch [440/693], Loss: 0.066474\n","Train Batch [450/693], Loss: 0.030054\n","Train Batch [460/693], Loss: 0.187049\n","Train Batch [470/693], Loss: 0.117326\n","Train Batch [480/693], Loss: 0.840496\n","Train Batch [490/693], Loss: 0.078050\n","Train Batch [500/693], Loss: 0.039231\n","Train Batch [510/693], Loss: 0.071962\n","Train Batch [520/693], Loss: 0.277624\n","Train Batch [530/693], Loss: 0.115250\n","Train Batch [540/693], Loss: 0.034743\n","Train Batch [550/693], Loss: 0.074845\n","Train Batch [560/693], Loss: 0.137410\n","Train Batch [570/693], Loss: 0.080533\n","Train Batch [580/693], Loss: 0.039741\n","Train Batch [590/693], Loss: 0.045759\n","Train Batch [600/693], Loss: 0.037082\n","Train Batch [610/693], Loss: 0.174911\n","Train Batch [620/693], Loss: 0.029524\n","Train Batch [630/693], Loss: 0.479354\n","Train Batch [640/693], Loss: 0.074909\n","Train Batch [650/693], Loss: 0.060416\n","Train Batch [660/693], Loss: 0.132055\n","Train Batch [670/693], Loss: 0.044165\n","Train Batch [680/693], Loss: 0.062860\n","Train Batch [690/693], Loss: 0.075113\n","Epoch [19/30]\n","Train Loss: 0.174165, Val Loss: 0.157704\n","LR: 1.00e-04\n","Epoch Time: 70.08s, Total Time: 22.34min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.157704\n","Train Batch [0/693], Loss: 0.111469\n","Train Batch [10/693], Loss: 0.234684\n","Train Batch [20/693], Loss: 0.095854\n","Train Batch [30/693], Loss: 0.031688\n","Train Batch [40/693], Loss: 0.056972\n","Train Batch [50/693], Loss: 0.093310\n","Train Batch [60/693], Loss: 0.100780\n","Train Batch [70/693], Loss: 0.240300\n","Train Batch [80/693], Loss: 0.112826\n","Train Batch [90/693], Loss: 0.024856\n","Train Batch [100/693], Loss: 0.650280\n","Train Batch [110/693], Loss: 0.141498\n","Train Batch [120/693], Loss: 0.315944\n","Train Batch [130/693], Loss: 0.074814\n","Train Batch [140/693], Loss: 0.301285\n","Train Batch [150/693], Loss: 0.235873\n","Train Batch [160/693], Loss: 0.424092\n","Train Batch [170/693], Loss: 0.173599\n","Train Batch [180/693], Loss: 0.168408\n","Train Batch [190/693], Loss: 0.050882\n","Train Batch [200/693], Loss: 0.038150\n","Train Batch [210/693], Loss: 0.206107\n","Train Batch [220/693], Loss: 0.267643\n","Train Batch [230/693], Loss: 0.099844\n","Train Batch [240/693], Loss: 0.040838\n","Train Batch [250/693], Loss: 0.364109\n","Train Batch [260/693], Loss: 0.149810\n","Train Batch [270/693], Loss: 0.085610\n","Train Batch [280/693], Loss: 0.161756\n","Train Batch [290/693], Loss: 0.169549\n","Train Batch [300/693], Loss: 0.464025\n","Train Batch [310/693], Loss: 0.054630\n","Train Batch [320/693], Loss: 0.268961\n","Train Batch [330/693], Loss: 0.309580\n","Train Batch [340/693], Loss: 0.214882\n","Train Batch [350/693], Loss: 0.330403\n","Train Batch [360/693], Loss: 0.277790\n","Train Batch [370/693], Loss: 0.076578\n","Train Batch [380/693], Loss: 0.042295\n","Train Batch [390/693], Loss: 0.067840\n","Train Batch [400/693], Loss: 0.129045\n","Train Batch [410/693], Loss: 0.291238\n","Train Batch [420/693], Loss: 0.313227\n","Train Batch [430/693], Loss: 0.022464\n","Train Batch [440/693], Loss: 0.074047\n","Train Batch [450/693], Loss: 0.098737\n","Train Batch [460/693], Loss: 0.203909\n","Train Batch [470/693], Loss: 0.064117\n","Train Batch [480/693], Loss: 0.053394\n","Train Batch [490/693], Loss: 0.053775\n","Train Batch [500/693], Loss: 0.034053\n","Train Batch [510/693], Loss: 0.249952\n","Train Batch [520/693], Loss: 0.035332\n","Train Batch [530/693], Loss: 0.040176\n","Train Batch [540/693], Loss: 0.039415\n","Train Batch [550/693], Loss: 0.126205\n","Train Batch [560/693], Loss: 0.239822\n","Train Batch [570/693], Loss: 0.129185\n","Train Batch [580/693], Loss: 0.099410\n","Train Batch [590/693], Loss: 0.122024\n","Train Batch [600/693], Loss: 0.309140\n","Train Batch [610/693], Loss: 0.540463\n","Train Batch [620/693], Loss: 0.356147\n","Train Batch [630/693], Loss: 0.070108\n","Train Batch [640/693], Loss: 0.088138\n","Train Batch [650/693], Loss: 0.230353\n","Train Batch [660/693], Loss: 0.048934\n","Train Batch [670/693], Loss: 0.056775\n","Train Batch [680/693], Loss: 0.311238\n","Train Batch [690/693], Loss: 0.066110\n","Epoch [20/30]\n","Train Loss: 0.166406, Val Loss: 0.152289\n","LR: 1.00e-04\n","Epoch Time: 70.04s, Total Time: 23.51min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.152289\n","✓ Checkpoint saved at epoch 20\n","Train Batch [0/693], Loss: 0.215371\n","Train Batch [10/693], Loss: 0.267870\n","Train Batch [20/693], Loss: 0.055145\n","Train Batch [30/693], Loss: 0.132963\n","Train Batch [40/693], Loss: 0.302284\n","Train Batch [50/693], Loss: 0.091434\n","Train Batch [60/693], Loss: 0.058309\n","Train Batch [70/693], Loss: 0.050578\n","Train Batch [80/693], Loss: 0.114231\n","Train Batch [90/693], Loss: 0.038143\n","Train Batch [100/693], Loss: 0.035218\n","Train Batch [110/693], Loss: 0.038217\n","Train Batch [120/693], Loss: 0.029984\n","Train Batch [130/693], Loss: 0.155528\n","Train Batch [140/693], Loss: 0.028179\n","Train Batch [150/693], Loss: 0.078081\n","Train Batch [160/693], Loss: 0.052403\n","Train Batch [170/693], Loss: 0.055971\n","Train Batch [180/693], Loss: 0.039880\n","Train Batch [190/693], Loss: 0.252621\n","Train Batch [200/693], Loss: 0.068762\n","Train Batch [210/693], Loss: 0.070109\n","Train Batch [220/693], Loss: 0.054503\n","Train Batch [230/693], Loss: 0.200117\n","Train Batch [240/693], Loss: 0.081688\n","Train Batch [250/693], Loss: 0.034756\n","Train Batch [260/693], Loss: 0.019556\n","Train Batch [270/693], Loss: 0.060266\n","Train Batch [280/693], Loss: 1.035384\n","Train Batch [290/693], Loss: 0.044798\n","Train Batch [300/693], Loss: 0.216907\n","Train Batch [310/693], Loss: 0.029365\n","Train Batch [320/693], Loss: 2.751273\n","Train Batch [330/693], Loss: 0.051748\n","Train Batch [340/693], Loss: 0.419263\n","Train Batch [350/693], Loss: 0.245004\n","Train Batch [360/693], Loss: 0.382680\n","Train Batch [370/693], Loss: 0.052111\n","Train Batch [380/693], Loss: 0.273467\n","Train Batch [390/693], Loss: 0.265526\n","Train Batch [400/693], Loss: 0.194425\n","Train Batch [410/693], Loss: 0.081540\n","Train Batch [420/693], Loss: 0.073242\n","Train Batch [430/693], Loss: 0.044624\n","Train Batch [440/693], Loss: 0.266966\n","Train Batch [450/693], Loss: 0.213044\n","Train Batch [460/693], Loss: 0.043889\n","Train Batch [470/693], Loss: 0.061644\n","Train Batch [480/693], Loss: 0.201120\n","Train Batch [490/693], Loss: 0.224371\n","Train Batch [500/693], Loss: 0.257604\n","Train Batch [510/693], Loss: 0.096923\n","Train Batch [520/693], Loss: 0.254387\n","Train Batch [530/693], Loss: 0.075135\n","Train Batch [540/693], Loss: 0.111531\n","Train Batch [550/693], Loss: 0.191639\n","Train Batch [560/693], Loss: 0.052160\n","Train Batch [570/693], Loss: 0.444148\n","Train Batch [580/693], Loss: 0.213118\n","Train Batch [590/693], Loss: 0.186047\n","Train Batch [600/693], Loss: 0.266223\n","Train Batch [610/693], Loss: 0.212141\n","Train Batch [620/693], Loss: 0.041873\n","Train Batch [630/693], Loss: 0.089002\n","Train Batch [640/693], Loss: 0.108923\n","Train Batch [650/693], Loss: 0.047538\n","Train Batch [660/693], Loss: 0.269037\n","Train Batch [670/693], Loss: 0.087987\n","Train Batch [680/693], Loss: 0.250340\n","Train Batch [690/693], Loss: 0.042433\n","Epoch [21/30]\n","Train Loss: 0.165978, Val Loss: 0.153313\n","LR: 1.00e-04\n","Epoch Time: 70.74s, Total Time: 24.71min\n","--------------------------------------------------\n","Train Batch [0/693], Loss: 0.090220\n","Train Batch [10/693], Loss: 0.037324\n","Train Batch [20/693], Loss: 0.062429\n","Train Batch [30/693], Loss: 0.034125\n","Train Batch [40/693], Loss: 0.040023\n","Train Batch [50/693], Loss: 0.117556\n","Train Batch [60/693], Loss: 0.037426\n","Train Batch [70/693], Loss: 0.332089\n","Train Batch [80/693], Loss: 0.150171\n","Train Batch [90/693], Loss: 0.163814\n","Train Batch [100/693], Loss: 0.077461\n","Train Batch [110/693], Loss: 0.317736\n","Train Batch [120/693], Loss: 0.104118\n","Train Batch [130/693], Loss: 0.086115\n","Train Batch [140/693], Loss: 0.140404\n","Train Batch [150/693], Loss: 0.040376\n","Train Batch [160/693], Loss: 0.387394\n","Train Batch [170/693], Loss: 0.187606\n","Train Batch [180/693], Loss: 0.339434\n","Train Batch [190/693], Loss: 0.024559\n","Train Batch [200/693], Loss: 0.100050\n","Train Batch [210/693], Loss: 0.328643\n","Train Batch [220/693], Loss: 0.031345\n","Train Batch [230/693], Loss: 0.092362\n","Train Batch [240/693], Loss: 0.378576\n","Train Batch [250/693], Loss: 0.076877\n","Train Batch [260/693], Loss: 0.373939\n","Train Batch [270/693], Loss: 0.195532\n","Train Batch [280/693], Loss: 0.029143\n","Train Batch [290/693], Loss: 0.309131\n","Train Batch [300/693], Loss: 0.061066\n","Train Batch [310/693], Loss: 0.046235\n","Train Batch [320/693], Loss: 0.042045\n","Train Batch [330/693], Loss: 0.098694\n","Train Batch [340/693], Loss: 0.052097\n","Train Batch [350/693], Loss: 0.242883\n","Train Batch [360/693], Loss: 0.064090\n","Train Batch [370/693], Loss: 0.077442\n","Train Batch [380/693], Loss: 0.059112\n","Train Batch [390/693], Loss: 0.070168\n","Train Batch [400/693], Loss: 0.415268\n","Train Batch [410/693], Loss: 0.249872\n","Train Batch [420/693], Loss: 0.294449\n","Train Batch [430/693], Loss: 0.047886\n","Train Batch [440/693], Loss: 0.278663\n","Train Batch [450/693], Loss: 0.122388\n","Train Batch [460/693], Loss: 0.611650\n","Train Batch [470/693], Loss: 0.057841\n","Train Batch [480/693], Loss: 0.036626\n","Train Batch [490/693], Loss: 0.094329\n","Train Batch [500/693], Loss: 0.093543\n","Train Batch [510/693], Loss: 0.061975\n","Train Batch [520/693], Loss: 0.071803\n","Train Batch [530/693], Loss: 0.149438\n","Train Batch [540/693], Loss: 0.155839\n","Train Batch [550/693], Loss: 0.080371\n","Train Batch [560/693], Loss: 0.729196\n","Train Batch [570/693], Loss: 0.621947\n","Train Batch [580/693], Loss: 0.161896\n","Train Batch [590/693], Loss: 0.150717\n","Train Batch [600/693], Loss: 0.103385\n","Train Batch [610/693], Loss: 0.054660\n","Train Batch [620/693], Loss: 0.779282\n","Train Batch [630/693], Loss: 0.137982\n","Train Batch [640/693], Loss: 0.307494\n","Train Batch [650/693], Loss: 0.135868\n","Train Batch [660/693], Loss: 0.104171\n","Train Batch [670/693], Loss: 0.047215\n","Train Batch [680/693], Loss: 0.116142\n","Train Batch [690/693], Loss: 0.044241\n","Epoch [22/30]\n","Train Loss: 0.154885, Val Loss: 0.145269\n","LR: 1.00e-04\n","Epoch Time: 70.21s, Total Time: 25.88min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.145269\n","Train Batch [0/693], Loss: 0.066889\n","Train Batch [10/693], Loss: 0.168059\n","Train Batch [20/693], Loss: 0.183552\n","Train Batch [30/693], Loss: 0.032941\n","Train Batch [40/693], Loss: 0.094807\n","Train Batch [50/693], Loss: 0.053781\n","Train Batch [60/693], Loss: 0.037524\n","Train Batch [70/693], Loss: 0.138191\n","Train Batch [80/693], Loss: 0.261875\n","Train Batch [90/693], Loss: 0.035736\n","Train Batch [100/693], Loss: 0.081264\n","Train Batch [110/693], Loss: 0.084956\n","Train Batch [120/693], Loss: 0.162429\n","Train Batch [130/693], Loss: 0.058708\n","Train Batch [140/693], Loss: 0.141158\n","Train Batch [150/693], Loss: 0.762496\n","Train Batch [160/693], Loss: 0.068548\n","Train Batch [170/693], Loss: 0.050103\n","Train Batch [180/693], Loss: 0.278795\n","Train Batch [190/693], Loss: 0.227079\n","Train Batch [200/693], Loss: 0.184974\n","Train Batch [210/693], Loss: 0.038177\n","Train Batch [220/693], Loss: 0.056300\n","Train Batch [230/693], Loss: 0.054394\n","Train Batch [240/693], Loss: 0.032948\n","Train Batch [250/693], Loss: 0.030993\n","Train Batch [260/693], Loss: 0.040421\n","Train Batch [270/693], Loss: 0.051134\n","Train Batch [280/693], Loss: 0.239743\n","Train Batch [290/693], Loss: 0.091474\n","Train Batch [300/693], Loss: 0.114665\n","Train Batch [310/693], Loss: 0.140235\n","Train Batch [320/693], Loss: 0.035382\n","Train Batch [330/693], Loss: 0.053273\n","Train Batch [340/693], Loss: 0.061304\n","Train Batch [350/693], Loss: 0.306818\n","Train Batch [360/693], Loss: 0.067151\n","Train Batch [370/693], Loss: 0.023707\n","Train Batch [380/693], Loss: 0.066961\n","Train Batch [390/693], Loss: 0.068362\n","Train Batch [400/693], Loss: 0.129463\n","Train Batch [410/693], Loss: 0.120706\n","Train Batch [420/693], Loss: 0.054054\n","Train Batch [430/693], Loss: 0.315596\n","Train Batch [440/693], Loss: 0.082139\n","Train Batch [450/693], Loss: 0.116696\n","Train Batch [460/693], Loss: 0.025417\n","Train Batch [470/693], Loss: 0.071616\n","Train Batch [480/693], Loss: 0.092670\n","Train Batch [490/693], Loss: 0.026451\n","Train Batch [500/693], Loss: 0.194849\n","Train Batch [510/693], Loss: 0.057044\n","Train Batch [520/693], Loss: 0.098881\n","Train Batch [530/693], Loss: 0.129255\n","Train Batch [540/693], Loss: 0.140227\n","Train Batch [550/693], Loss: 0.140494\n","Train Batch [560/693], Loss: 0.265844\n","Train Batch [570/693], Loss: 0.321034\n","Train Batch [580/693], Loss: 0.138441\n","Train Batch [590/693], Loss: 0.293352\n","Train Batch [600/693], Loss: 0.060131\n","Train Batch [610/693], Loss: 0.049116\n","Train Batch [620/693], Loss: 0.121233\n","Train Batch [630/693], Loss: 0.028163\n","Train Batch [640/693], Loss: 0.855857\n","Train Batch [650/693], Loss: 0.034196\n","Train Batch [660/693], Loss: 0.367138\n","Train Batch [670/693], Loss: 0.145902\n","Train Batch [680/693], Loss: 0.038550\n","Train Batch [690/693], Loss: 0.291227\n","Epoch [23/30]\n","Train Loss: 0.151639, Val Loss: 0.145519\n","LR: 1.00e-04\n","Epoch Time: 70.57s, Total Time: 27.06min\n","--------------------------------------------------\n","Train Batch [0/693], Loss: 0.055329\n","Train Batch [10/693], Loss: 0.194003\n","Train Batch [20/693], Loss: 0.095312\n","Train Batch [30/693], Loss: 0.933910\n","Train Batch [40/693], Loss: 0.160136\n","Train Batch [50/693], Loss: 0.105848\n","Train Batch [60/693], Loss: 0.061642\n","Train Batch [70/693], Loss: 0.044940\n","Train Batch [80/693], Loss: 0.092747\n","Train Batch [90/693], Loss: 0.132091\n","Train Batch [100/693], Loss: 0.286513\n","Train Batch [110/693], Loss: 0.503110\n","Train Batch [120/693], Loss: 0.051981\n","Train Batch [130/693], Loss: 0.069521\n","Train Batch [140/693], Loss: 0.065441\n","Train Batch [150/693], Loss: 0.217754\n","Train Batch [160/693], Loss: 0.052405\n","Train Batch [170/693], Loss: 0.024473\n","Train Batch [180/693], Loss: 0.203864\n","Train Batch [190/693], Loss: 0.073933\n","Train Batch [200/693], Loss: 0.068596\n","Train Batch [210/693], Loss: 0.040606\n","Train Batch [220/693], Loss: 0.186624\n","Train Batch [230/693], Loss: 0.247150\n","Train Batch [240/693], Loss: 0.283094\n","Train Batch [250/693], Loss: 0.042157\n","Train Batch [260/693], Loss: 0.103087\n","Train Batch [270/693], Loss: 0.060926\n","Train Batch [280/693], Loss: 0.105483\n","Train Batch [290/693], Loss: 0.037010\n","Train Batch [300/693], Loss: 0.557935\n","Train Batch [310/693], Loss: 0.097181\n","Train Batch [320/693], Loss: 0.039932\n","Train Batch [330/693], Loss: 0.060408\n","Train Batch [340/693], Loss: 0.046481\n","Train Batch [350/693], Loss: 0.058592\n","Train Batch [360/693], Loss: 0.174073\n","Train Batch [370/693], Loss: 0.814921\n","Train Batch [380/693], Loss: 0.314490\n","Train Batch [390/693], Loss: 0.104917\n","Train Batch [400/693], Loss: 0.039580\n","Train Batch [410/693], Loss: 0.160537\n","Train Batch [420/693], Loss: 0.050431\n","Train Batch [430/693], Loss: 0.042183\n","Train Batch [440/693], Loss: 0.092212\n","Train Batch [450/693], Loss: 0.065346\n","Train Batch [460/693], Loss: 1.493526\n","Train Batch [470/693], Loss: 0.141757\n","Train Batch [480/693], Loss: 0.234386\n","Train Batch [490/693], Loss: 0.120423\n","Train Batch [500/693], Loss: 0.036378\n","Train Batch [510/693], Loss: 0.070263\n","Train Batch [520/693], Loss: 0.055854\n","Train Batch [530/693], Loss: 0.032346\n","Train Batch [540/693], Loss: 0.089726\n","Train Batch [550/693], Loss: 0.567428\n","Train Batch [560/693], Loss: 0.087328\n","Train Batch [570/693], Loss: 0.191536\n","Train Batch [580/693], Loss: 0.054949\n","Train Batch [590/693], Loss: 0.041661\n","Train Batch [600/693], Loss: 0.073326\n","Train Batch [610/693], Loss: 0.246402\n","Train Batch [620/693], Loss: 0.024981\n","Train Batch [630/693], Loss: 0.023829\n","Train Batch [640/693], Loss: 0.067001\n","Train Batch [650/693], Loss: 0.087718\n","Train Batch [660/693], Loss: 0.025962\n","Train Batch [670/693], Loss: 0.517465\n","Train Batch [680/693], Loss: 0.088990\n","Train Batch [690/693], Loss: 0.233840\n","Epoch [24/30]\n","Train Loss: 0.147813, Val Loss: 0.139056\n","LR: 1.00e-04\n","Epoch Time: 70.27s, Total Time: 28.23min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.139056\n","Train Batch [0/693], Loss: 0.119154\n","Train Batch [10/693], Loss: 0.163514\n","Train Batch [20/693], Loss: 0.049519\n","Train Batch [30/693], Loss: 0.081125\n","Train Batch [40/693], Loss: 0.102329\n","Train Batch [50/693], Loss: 0.062773\n","Train Batch [60/693], Loss: 0.049797\n","Train Batch [70/693], Loss: 0.195874\n","Train Batch [80/693], Loss: 0.264315\n","Train Batch [90/693], Loss: 0.151567\n","Train Batch [100/693], Loss: 0.053321\n","Train Batch [110/693], Loss: 0.038227\n","Train Batch [120/693], Loss: 0.075694\n","Train Batch [130/693], Loss: 0.051227\n","Train Batch [140/693], Loss: 0.424345\n","Train Batch [150/693], Loss: 0.204852\n","Train Batch [160/693], Loss: 0.202522\n","Train Batch [170/693], Loss: 0.025127\n","Train Batch [180/693], Loss: 0.121092\n","Train Batch [190/693], Loss: 0.118509\n","Train Batch [200/693], Loss: 0.114197\n","Train Batch [210/693], Loss: 0.376831\n","Train Batch [220/693], Loss: 0.048006\n","Train Batch [230/693], Loss: 0.173275\n","Train Batch [240/693], Loss: 0.069252\n","Train Batch [250/693], Loss: 0.068020\n","Train Batch [260/693], Loss: 0.057037\n","Train Batch [270/693], Loss: 0.677424\n","Train Batch [280/693], Loss: 0.127571\n","Train Batch [290/693], Loss: 0.220173\n","Train Batch [300/693], Loss: 0.150831\n","Train Batch [310/693], Loss: 0.043593\n","Train Batch [320/693], Loss: 0.040316\n","Train Batch [330/693], Loss: 0.065622\n","Train Batch [340/693], Loss: 0.144878\n","Train Batch [350/693], Loss: 0.109146\n","Train Batch [360/693], Loss: 0.037106\n","Train Batch [370/693], Loss: 0.120752\n","Train Batch [380/693], Loss: 0.044914\n","Train Batch [390/693], Loss: 0.034171\n","Train Batch [400/693], Loss: 0.040251\n","Train Batch [410/693], Loss: 0.103534\n","Train Batch [420/693], Loss: 0.183934\n","Train Batch [430/693], Loss: 0.211840\n","Train Batch [440/693], Loss: 0.035766\n","Train Batch [450/693], Loss: 0.078237\n","Train Batch [460/693], Loss: 0.313739\n","Train Batch [470/693], Loss: 0.140373\n","Train Batch [480/693], Loss: 0.097469\n","Train Batch [490/693], Loss: 0.111092\n","Train Batch [500/693], Loss: 0.080623\n","Train Batch [510/693], Loss: 0.065382\n","Train Batch [520/693], Loss: 0.445181\n","Train Batch [530/693], Loss: 0.069740\n","Train Batch [540/693], Loss: 0.108789\n","Train Batch [550/693], Loss: 0.044726\n","Train Batch [560/693], Loss: 0.320388\n","Train Batch [570/693], Loss: 0.042987\n","Train Batch [580/693], Loss: 0.048548\n","Train Batch [590/693], Loss: 0.076173\n","Train Batch [600/693], Loss: 0.073772\n","Train Batch [610/693], Loss: 0.089723\n","Train Batch [620/693], Loss: 0.284153\n","Train Batch [630/693], Loss: 0.340109\n","Train Batch [640/693], Loss: 0.079324\n","Train Batch [650/693], Loss: 0.062097\n","Train Batch [660/693], Loss: 0.126974\n","Train Batch [670/693], Loss: 0.021572\n","Train Batch [680/693], Loss: 0.497454\n","Train Batch [690/693], Loss: 0.043004\n","Epoch [25/30]\n","Train Loss: 0.147910, Val Loss: 0.142517\n","LR: 1.00e-04\n","Epoch Time: 70.73s, Total Time: 29.41min\n","--------------------------------------------------\n","Train Batch [0/693], Loss: 0.052659\n","Train Batch [10/693], Loss: 0.083242\n","Train Batch [20/693], Loss: 0.072826\n","Train Batch [30/693], Loss: 0.100886\n","Train Batch [40/693], Loss: 0.029238\n","Train Batch [50/693], Loss: 0.037063\n","Train Batch [60/693], Loss: 0.132205\n","Train Batch [70/693], Loss: 1.299803\n","Train Batch [80/693], Loss: 0.045299\n","Train Batch [90/693], Loss: 0.065409\n","Train Batch [100/693], Loss: 0.021744\n","Train Batch [110/693], Loss: 0.131712\n","Train Batch [120/693], Loss: 0.035324\n","Train Batch [130/693], Loss: 0.091864\n","Train Batch [140/693], Loss: 0.043472\n","Train Batch [150/693], Loss: 0.324024\n","Train Batch [160/693], Loss: 0.088907\n","Train Batch [170/693], Loss: 0.063873\n","Train Batch [180/693], Loss: 0.067579\n","Train Batch [190/693], Loss: 0.066833\n","Train Batch [200/693], Loss: 0.053710\n","Train Batch [210/693], Loss: 0.107651\n","Train Batch [220/693], Loss: 0.054088\n","Train Batch [230/693], Loss: 0.025617\n","Train Batch [240/693], Loss: 0.034296\n","Train Batch [250/693], Loss: 0.170918\n","Train Batch [260/693], Loss: 0.173278\n","Train Batch [270/693], Loss: 0.317408\n","Train Batch [280/693], Loss: 0.164426\n","Train Batch [290/693], Loss: 0.061867\n","Train Batch [300/693], Loss: 0.261948\n","Train Batch [310/693], Loss: 0.156097\n","Train Batch [320/693], Loss: 0.047935\n","Train Batch [330/693], Loss: 0.022704\n","Train Batch [340/693], Loss: 0.204826\n","Train Batch [350/693], Loss: 0.047990\n","Train Batch [360/693], Loss: 0.020338\n","Train Batch [370/693], Loss: 0.032780\n","Train Batch [380/693], Loss: 0.066330\n","Train Batch [390/693], Loss: 0.100721\n","Train Batch [400/693], Loss: 0.036425\n","Train Batch [410/693], Loss: 0.201793\n","Train Batch [420/693], Loss: 0.048023\n","Train Batch [430/693], Loss: 0.248739\n","Train Batch [440/693], Loss: 0.170687\n","Train Batch [450/693], Loss: 0.091151\n","Train Batch [460/693], Loss: 0.228794\n","Train Batch [470/693], Loss: 0.140340\n","Train Batch [480/693], Loss: 0.071566\n","Train Batch [490/693], Loss: 0.383271\n","Train Batch [500/693], Loss: 0.065588\n","Train Batch [510/693], Loss: 0.069967\n","Train Batch [520/693], Loss: 0.137732\n","Train Batch [530/693], Loss: 0.050485\n","Train Batch [540/693], Loss: 0.081921\n","Train Batch [550/693], Loss: 0.018422\n","Train Batch [560/693], Loss: 0.087472\n","Train Batch [570/693], Loss: 0.070662\n","Train Batch [580/693], Loss: 0.170186\n","Train Batch [590/693], Loss: 0.026341\n","Train Batch [600/693], Loss: 0.519917\n","Train Batch [610/693], Loss: 0.057013\n","Train Batch [620/693], Loss: 0.048840\n","Train Batch [630/693], Loss: 0.047092\n","Train Batch [640/693], Loss: 0.026966\n","Train Batch [650/693], Loss: 0.060736\n","Train Batch [660/693], Loss: 0.190212\n","Train Batch [670/693], Loss: 0.056107\n","Train Batch [680/693], Loss: 0.055673\n","Train Batch [690/693], Loss: 0.078453\n","Epoch [26/30]\n","Train Loss: 0.138911, Val Loss: 0.139936\n","LR: 1.00e-04\n","Epoch Time: 69.98s, Total Time: 30.58min\n","--------------------------------------------------\n","Train Batch [0/693], Loss: 0.127341\n","Train Batch [10/693], Loss: 0.095879\n","Train Batch [20/693], Loss: 0.200526\n","Train Batch [30/693], Loss: 0.224171\n","Train Batch [40/693], Loss: 0.037162\n","Train Batch [50/693], Loss: 0.079284\n","Train Batch [60/693], Loss: 0.069240\n","Train Batch [70/693], Loss: 0.099053\n","Train Batch [80/693], Loss: 0.226593\n","Train Batch [90/693], Loss: 0.041225\n","Train Batch [100/693], Loss: 0.033030\n","Train Batch [110/693], Loss: 0.028128\n","Train Batch [120/693], Loss: 0.094967\n","Train Batch [130/693], Loss: 0.148803\n","Train Batch [140/693], Loss: 0.061103\n","Train Batch [150/693], Loss: 0.070020\n","Train Batch [160/693], Loss: 0.094717\n","Train Batch [170/693], Loss: 0.021912\n","Train Batch [180/693], Loss: 0.076485\n","Train Batch [190/693], Loss: 0.038966\n","Train Batch [200/693], Loss: 0.159991\n","Train Batch [210/693], Loss: 0.279103\n","Train Batch [220/693], Loss: 0.112193\n","Train Batch [230/693], Loss: 0.160317\n","Train Batch [240/693], Loss: 0.189377\n","Train Batch [250/693], Loss: 0.050910\n","Train Batch [260/693], Loss: 0.066349\n","Train Batch [270/693], Loss: 0.095085\n","Train Batch [280/693], Loss: 0.029619\n","Train Batch [290/693], Loss: 0.026143\n","Train Batch [300/693], Loss: 0.070435\n","Train Batch [310/693], Loss: 0.175693\n","Train Batch [320/693], Loss: 0.145163\n","Train Batch [330/693], Loss: 1.032555\n","Train Batch [340/693], Loss: 0.064784\n","Train Batch [350/693], Loss: 0.119351\n","Train Batch [360/693], Loss: 0.099789\n","Train Batch [370/693], Loss: 0.045053\n","Train Batch [380/693], Loss: 0.036752\n","Train Batch [390/693], Loss: 0.033299\n","Train Batch [400/693], Loss: 0.176117\n","Train Batch [410/693], Loss: 0.044478\n","Train Batch [420/693], Loss: 0.065235\n","Train Batch [430/693], Loss: 0.532955\n","Train Batch [440/693], Loss: 0.079221\n","Train Batch [450/693], Loss: 0.033163\n","Train Batch [460/693], Loss: 0.045322\n","Train Batch [470/693], Loss: 0.051641\n","Train Batch [480/693], Loss: 0.054524\n","Train Batch [490/693], Loss: 0.197361\n","Train Batch [500/693], Loss: 0.042603\n","Train Batch [510/693], Loss: 0.090183\n","Train Batch [520/693], Loss: 0.103512\n","Train Batch [530/693], Loss: 0.113137\n","Train Batch [540/693], Loss: 0.069157\n","Train Batch [550/693], Loss: 0.030153\n","Train Batch [560/693], Loss: 0.070442\n","Train Batch [570/693], Loss: 0.038724\n","Train Batch [580/693], Loss: 0.256862\n","Train Batch [590/693], Loss: 0.150956\n","Train Batch [600/693], Loss: 0.050782\n","Train Batch [610/693], Loss: 0.037483\n","Train Batch [620/693], Loss: 0.039401\n","Train Batch [630/693], Loss: 0.184823\n","Train Batch [640/693], Loss: 0.182244\n","Train Batch [650/693], Loss: 0.063316\n","Train Batch [660/693], Loss: 0.035339\n","Train Batch [670/693], Loss: 0.056501\n","Train Batch [680/693], Loss: 0.337184\n","Train Batch [690/693], Loss: 0.041210\n","Epoch [27/30]\n","Train Loss: 0.134489, Val Loss: 0.138202\n","LR: 1.00e-04\n","Epoch Time: 70.52s, Total Time: 31.75min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.138202\n","Train Batch [0/693], Loss: 0.041241\n","Train Batch [10/693], Loss: 0.122859\n","Train Batch [20/693], Loss: 0.116764\n","Train Batch [30/693], Loss: 0.168057\n","Train Batch [40/693], Loss: 0.053585\n","Train Batch [50/693], Loss: 0.097628\n","Train Batch [60/693], Loss: 0.034705\n","Train Batch [70/693], Loss: 0.062520\n","Train Batch [80/693], Loss: 0.126236\n","Train Batch [90/693], Loss: 0.088324\n","Train Batch [100/693], Loss: 0.322812\n","Train Batch [110/693], Loss: 0.084825\n","Train Batch [120/693], Loss: 0.549811\n","Train Batch [130/693], Loss: 0.083894\n","Train Batch [140/693], Loss: 0.033806\n","Train Batch [150/693], Loss: 0.065687\n","Train Batch [160/693], Loss: 0.072917\n","Train Batch [170/693], Loss: 0.151566\n","Train Batch [180/693], Loss: 0.021813\n","Train Batch [190/693], Loss: 0.251455\n","Train Batch [200/693], Loss: 0.279729\n","Train Batch [210/693], Loss: 0.305063\n","Train Batch [220/693], Loss: 0.054589\n","Train Batch [230/693], Loss: 0.045372\n","Train Batch [240/693], Loss: 0.188039\n","Train Batch [250/693], Loss: 0.283449\n","Train Batch [260/693], Loss: 0.023908\n","Train Batch [270/693], Loss: 0.042268\n","Train Batch [280/693], Loss: 0.017848\n","Train Batch [290/693], Loss: 0.036883\n","Train Batch [300/693], Loss: 0.040133\n","Train Batch [310/693], Loss: 0.048097\n","Train Batch [320/693], Loss: 0.020262\n","Train Batch [330/693], Loss: 0.153697\n","Train Batch [340/693], Loss: 0.140009\n","Train Batch [350/693], Loss: 0.344052\n","Train Batch [360/693], Loss: 0.107879\n","Train Batch [370/693], Loss: 0.052503\n","Train Batch [380/693], Loss: 0.350570\n","Train Batch [390/693], Loss: 0.045338\n","Train Batch [400/693], Loss: 0.049028\n","Train Batch [410/693], Loss: 0.056080\n","Train Batch [420/693], Loss: 0.153484\n","Train Batch [430/693], Loss: 0.100264\n","Train Batch [440/693], Loss: 0.055228\n","Train Batch [450/693], Loss: 0.041944\n","Train Batch [460/693], Loss: 0.297768\n","Train Batch [470/693], Loss: 0.098401\n","Train Batch [480/693], Loss: 0.193018\n","Train Batch [490/693], Loss: 0.068553\n","Train Batch [500/693], Loss: 0.274014\n","Train Batch [510/693], Loss: 0.200492\n","Train Batch [520/693], Loss: 0.045383\n","Train Batch [530/693], Loss: 0.036720\n","Train Batch [540/693], Loss: 0.027848\n","Train Batch [550/693], Loss: 0.078220\n","Train Batch [560/693], Loss: 0.044155\n","Train Batch [570/693], Loss: 0.043870\n","Train Batch [580/693], Loss: 0.244578\n","Train Batch [590/693], Loss: 0.091081\n","Train Batch [600/693], Loss: 0.088861\n","Train Batch [610/693], Loss: 0.096911\n","Train Batch [620/693], Loss: 0.093397\n","Train Batch [630/693], Loss: 0.085372\n","Train Batch [640/693], Loss: 0.636350\n","Train Batch [650/693], Loss: 0.134077\n","Train Batch [660/693], Loss: 0.061609\n","Train Batch [670/693], Loss: 0.024764\n","Train Batch [680/693], Loss: 0.035224\n","Train Batch [690/693], Loss: 0.079496\n","Epoch [28/30]\n","Train Loss: 0.134140, Val Loss: 0.150716\n","LR: 1.00e-04\n","Epoch Time: 70.32s, Total Time: 32.93min\n","--------------------------------------------------\n","Train Batch [0/693], Loss: 0.052773\n","Train Batch [10/693], Loss: 0.041347\n","Train Batch [20/693], Loss: 0.034977\n","Train Batch [30/693], Loss: 0.202839\n","Train Batch [40/693], Loss: 0.053150\n","Train Batch [50/693], Loss: 0.209884\n","Train Batch [60/693], Loss: 0.023970\n","Train Batch [70/693], Loss: 0.054201\n","Train Batch [80/693], Loss: 0.350097\n","Train Batch [90/693], Loss: 1.845108\n","Train Batch [100/693], Loss: 0.055522\n","Train Batch [110/693], Loss: 0.025090\n","Train Batch [120/693], Loss: 0.044932\n","Train Batch [130/693], Loss: 0.055005\n","Train Batch [140/693], Loss: 0.180894\n","Train Batch [150/693], Loss: 0.051844\n","Train Batch [160/693], Loss: 0.136447\n","Train Batch [170/693], Loss: 0.051104\n","Train Batch [180/693], Loss: 0.042423\n","Train Batch [190/693], Loss: 0.041825\n","Train Batch [200/693], Loss: 3.382647\n","Train Batch [210/693], Loss: 0.138646\n","Train Batch [220/693], Loss: 0.131139\n","Train Batch [230/693], Loss: 0.038966\n","Train Batch [240/693], Loss: 0.048861\n","Train Batch [250/693], Loss: 0.070810\n","Train Batch [260/693], Loss: 0.068169\n","Train Batch [270/693], Loss: 0.330178\n","Train Batch [280/693], Loss: 0.140112\n","Train Batch [290/693], Loss: 0.053767\n","Train Batch [300/693], Loss: 0.205482\n","Train Batch [310/693], Loss: 0.160364\n","Train Batch [320/693], Loss: 0.187805\n","Train Batch [330/693], Loss: 0.043335\n","Train Batch [340/693], Loss: 0.030931\n","Train Batch [350/693], Loss: 0.174851\n","Train Batch [360/693], Loss: 0.039449\n","Train Batch [370/693], Loss: 0.120886\n","Train Batch [380/693], Loss: 0.083982\n","Train Batch [390/693], Loss: 0.108254\n","Train Batch [400/693], Loss: 0.598378\n","Train Batch [410/693], Loss: 0.044854\n","Train Batch [420/693], Loss: 0.045836\n","Train Batch [430/693], Loss: 0.162650\n","Train Batch [440/693], Loss: 0.033515\n","Train Batch [450/693], Loss: 0.892843\n","Train Batch [460/693], Loss: 0.180077\n","Train Batch [470/693], Loss: 0.069281\n","Train Batch [480/693], Loss: 0.027644\n","Train Batch [490/693], Loss: 0.040462\n","Train Batch [500/693], Loss: 0.026560\n","Train Batch [510/693], Loss: 0.062691\n","Train Batch [520/693], Loss: 0.061462\n","Train Batch [530/693], Loss: 0.150109\n","Train Batch [540/693], Loss: 0.141761\n","Train Batch [550/693], Loss: 0.198273\n","Train Batch [560/693], Loss: 0.135036\n","Train Batch [570/693], Loss: 0.055010\n","Train Batch [580/693], Loss: 0.075638\n","Train Batch [590/693], Loss: 0.042233\n","Train Batch [600/693], Loss: 1.153034\n","Train Batch [610/693], Loss: 0.077235\n","Train Batch [620/693], Loss: 0.091107\n","Train Batch [630/693], Loss: 0.038193\n","Train Batch [640/693], Loss: 0.056599\n","Train Batch [650/693], Loss: 0.210553\n","Train Batch [660/693], Loss: 0.431779\n","Train Batch [670/693], Loss: 0.041983\n","Train Batch [680/693], Loss: 0.056959\n","Train Batch [690/693], Loss: 0.180356\n","Epoch [29/30]\n","Train Loss: 0.137361, Val Loss: 0.139980\n","LR: 1.00e-04\n","Epoch Time: 70.01s, Total Time: 34.09min\n","--------------------------------------------------\n","Train Batch [0/693], Loss: 0.022636\n","Train Batch [10/693], Loss: 0.202692\n","Train Batch [20/693], Loss: 0.242790\n","Train Batch [30/693], Loss: 0.027713\n","Train Batch [40/693], Loss: 0.048190\n","Train Batch [50/693], Loss: 0.057766\n","Train Batch [60/693], Loss: 0.104884\n","Train Batch [70/693], Loss: 0.041877\n","Train Batch [80/693], Loss: 0.534579\n","Train Batch [90/693], Loss: 0.035937\n","Train Batch [100/693], Loss: 0.037265\n","Train Batch [110/693], Loss: 0.017581\n","Train Batch [120/693], Loss: 0.305516\n","Train Batch [130/693], Loss: 0.043233\n","Train Batch [140/693], Loss: 0.185296\n","Train Batch [150/693], Loss: 0.066193\n","Train Batch [160/693], Loss: 0.066938\n","Train Batch [170/693], Loss: 0.043562\n","Train Batch [180/693], Loss: 0.067521\n","Train Batch [190/693], Loss: 0.028645\n","Train Batch [200/693], Loss: 0.164597\n","Train Batch [210/693], Loss: 0.102310\n","Train Batch [220/693], Loss: 0.030462\n","Train Batch [230/693], Loss: 0.040678\n","Train Batch [240/693], Loss: 0.376889\n","Train Batch [250/693], Loss: 0.046736\n","Train Batch [260/693], Loss: 0.239578\n","Train Batch [270/693], Loss: 0.067317\n","Train Batch [280/693], Loss: 0.067925\n","Train Batch [290/693], Loss: 0.040738\n","Train Batch [300/693], Loss: 0.022734\n","Train Batch [310/693], Loss: 0.200403\n","Train Batch [320/693], Loss: 0.087382\n","Train Batch [330/693], Loss: 0.061290\n","Train Batch [340/693], Loss: 0.216575\n","Train Batch [350/693], Loss: 0.106240\n","Train Batch [360/693], Loss: 0.143425\n","Train Batch [370/693], Loss: 0.055881\n","Train Batch [380/693], Loss: 0.305220\n","Train Batch [390/693], Loss: 0.208252\n","Train Batch [400/693], Loss: 0.187489\n","Train Batch [410/693], Loss: 0.033718\n","Train Batch [420/693], Loss: 0.232011\n","Train Batch [430/693], Loss: 0.123693\n","Train Batch [440/693], Loss: 0.186305\n","Train Batch [450/693], Loss: 0.035735\n","Train Batch [460/693], Loss: 0.043982\n","Train Batch [470/693], Loss: 0.036545\n","Train Batch [480/693], Loss: 0.053039\n","Train Batch [490/693], Loss: 0.080559\n","Train Batch [500/693], Loss: 0.063350\n","Train Batch [510/693], Loss: 0.070639\n","Train Batch [520/693], Loss: 0.320184\n","Train Batch [530/693], Loss: 0.081447\n","Train Batch [540/693], Loss: 0.053239\n","Train Batch [550/693], Loss: 0.128261\n","Train Batch [560/693], Loss: 0.035383\n","Train Batch [570/693], Loss: 0.277031\n","Train Batch [580/693], Loss: 0.027084\n","Train Batch [590/693], Loss: 0.034519\n","Train Batch [600/693], Loss: 0.027432\n","Train Batch [610/693], Loss: 0.034130\n","Train Batch [620/693], Loss: 0.191290\n","Train Batch [630/693], Loss: 0.065431\n","Train Batch [640/693], Loss: 0.093446\n","Train Batch [650/693], Loss: 0.047824\n","Train Batch [660/693], Loss: 0.046438\n","Train Batch [670/693], Loss: 0.085730\n","Train Batch [680/693], Loss: 0.064594\n","Train Batch [690/693], Loss: 0.060350\n","Epoch [30/30]\n","Train Loss: 0.127531, Val Loss: 0.132986\n","LR: 1.00e-04\n","Epoch Time: 70.11s, Total Time: 35.26min\n","--------------------------------------------------\n","✓ New best model saved! Val Loss: 0.132986\n","✓ Checkpoint saved at epoch 30\n","Training completed!\n","Best validation loss: 0.132986\n","Total training time: 0.59 hours\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x1000 with 4 Axes>"],"image/png":"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889dUzBt3ryZGTNm0LBhQ6pUqQJA5syZ6dKlCyNHjqR+/frUqlWLnTt3utr8QVcQrFy5kr59+1K/fn3+97//ERAQwOHDh5k6dSo3b96kX79+rmPHjBnDM888w+OPP0779u3JnTs3R48eZenSpa5/o88++yyzZs0iTZo0FClShI0bN7Jq1SrXdDb34uHhweTJk6lduzZFixalTZs2ZM+enX/++Yc1a9YQFBTEt99+6zp+69atnD9/ngYNGtz3vCJuxxIRsUHHjh2tu/8TVKlSJato0aIxHr9hwwbrf//7n+Xn52dly5bNevvtt63ly5dbgLVmzRrXca1atbJy5crlun3kyBELsIYPHx7tnIDVt29f1+2+fftGywRYHTt2jPbYXLlyWa1atYqyb/Xq1Vbp0qUtb29vK2/evNbkyZOtHj16WL6+vvf4K/xn7969VmhoqBUQEGBlyJDBevXVV62dO3dagDVt2rQory916tTRHh9T9nPnzlkvv/yyFRQUZKVJk8Z6+eWXre3bt0c754MsXbrUAqysWbNaERERUe5zOp3W4MGDrVy5clk+Pj5W6dKlre+++y5aO1hW9L/3tGnTLMA6cuSIa19ERITVv39/K2vWrJafn59VuXJla8+ePdH+3mFhYVaPHj1cx5UvX97auHGjValSJatSpUpRnvfrr7+2ihQpYnl5eUV57TFlvHLlitWtWzcrW7ZsVqpUqaz8+fNbw4cPt5xOZ7TXEtv3xd0i35P3+pk1a5ZlWZZ16tQpq02bNlaGDBksb29vq3jx4tHabeHChVaNGjWsTJkyWd7e3lbOnDmt1157zfr3339dxwwaNMh68sknrbRp01p+fn5WoUKFrA8//NC6devWfXOKiIhIwlA/OCr1gw31g92rH7xo0SLL4XBYx48fj/Y675W/bdu2lmVZ1u3bt63+/ftbuXPntlKlSmXlyJHD6tWrlxUWFhblXOHh4dYHH3xgZcmSxfLz87OqVq1q7du3zwoODrZef/31++Y7fPiw1adPH+t///uflSlTJsvLy8vKmDGjVbduXevHH3+MdvyePXusRo0aWWnTprV8fX2tggULWh988IHr/gsXLrj+5gEBAVbNmjWt/fv3R2vXNWvWRPtvj2VZ1vbt263GjRtbwcHBlo+Pj5UrVy6radOm1urVq6Mc984771g5c+aM9r4ScXcOy3Kjr65FRJKZhg0b8vvvv7tWJxcRERERSQnUD5akLCIigiJFitC0aVMGDhyYaM978eJF0qVLx6BBg+jdu3eiPW9iuHnzJiEhIbz77rt06dLF7jgicaI50EVE4smNGzei3P7zzz/5/vvvqVy5sj2BREREREQSgfrBktx4enoyYMAAxo8fH+cpeWLr7n838N/c6cnx3860adNIlSoVr7/+ut1RROJMI9BFROJJ1qxZad26NXny5OHYsWN8+umn3Lx5k+3bt5M/f36744mIiIiIJAj1g0Xibvr06UyfPp06deoQEBDAzz//zNy5c6lRowbLly+3O56I3EGLiIqIxJNatWoxd+5cTp48iY+PD0899RSDBw/WhwYRERERSdbUDxaJuxIlSuDl5cWwYcO4fPmya2HRmBYoFRF7aQS6iIiIiIiIiIiIiEgMNAe6iIiIiIiIiIiIiEgMVEAXEREREREREREREYmB5kB/AKfTyYkTJwgMDMThcNgdR0RERETcjGVZXLlyhWzZsuHhofEp7kL9eBERERG5n9j241VAf4ATJ06QI0cOu2OIiIiIiJv766+/eOyxx+yOIf9P/XgRERERiY0H9eNVQH+AwMBAwPwhg4KCEuU5nU4nZ86cIWPGjBrF5GbUNu5J7eKe1C7uSe3intQu7im27XL58mVy5Mjh6jeKe7CjHw/69+yu1C7uSe3intQu7knt4p7ULu4rNm0T2368CugPEHm5Z1BQUKIW0MPCwggKCtI/PjejtnFPahf3pHZxT2oX96R2cU9xbRdNE+Je7OjHg/49uyu1i3tSu7gntYt7Uru4J7WL+4pL2zyoH6+WFRERERERERERERGJgQroIiIiIiIiIiIiIiIxUAFdRERERERERERERCQGmgNdREREko2IiAhu375td4w4czqd3L59m7CwMM2d6EYi2yUiIkLtIiIiIpKA1I+X+OZ0OnE6nfFyLhXQRUREJMmzLIuTJ09y8eJFu6M8FMuycDqdXLlyRQtRupE72yVdunRkyZJF7SMiIiISj9SPl4RiWRYREREAZM2a9ZHaRwV0ERERSfIiO92ZMmXC398/yXVeLcsiPDwcLy+vJJc9ObMsi9u3b3Pr1i3OnDkDmM63iIiIiMQP9eMloTidTq5evcq5c+dwOByP1I9XAV1ERESStIiICFenOzg42O44D0Udb/dkWRZeXl4E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YWF2p0h0OXOaInq6dLBpEzz/PNy+bXcqERERkUenArrcl78/9OpltgcOTJGfBURERESSpNOnT9OyZUsKFixItWrV2LJlC8uXL6d69erRjvXw8GDw4MF89dVXeHt7u/aXLFmSVatW8fzzz8f4HL/99hulS5emdOnSgCmWly5dmj59+riOadasGSNGjKBPnz6UKlWKHTt2sGzZsmgLiyYLgwbhKFoU/6lT7U5iiyJFYOlS8PMz07q88go4nXanEhEREXk0XnYHEPfXvj0MH27mNPz8czM3uoiIiIi4tylTpsTp+JgK64CrOB6TypUrY1nWA8/dqVMnOnXqFKc8SdJjj+EIDyfgk0+gUyfIlMnuRInuqadgwQJo0AC++ML8CUaMMIuOioiIiCRFGoEuD+TrC++/b7YHD4br1+3NIyIiIiLill5+GatkSTwuX8YxaJDdaWxTty5EDsIfNcoMxhERERFJqlRAl1hp0wZCQuDUKRg/3u40IiIiIiJuyNMTa9gws/3pp/Dnn/bmsVHLlv8Vzt95B6ZPtzWOiIiIyENTAV1ixdsb+vY12x99BFeu2JtHRERERMQthYZys2pVHOHh8O67dqexVc+e5gegXTv49lt784iIiIg8DBXQJdZeegkKFIBz52DMGLvTiIiIiIi4pyt9+mB5eMCiRfDzz3bHsdVHH5nR6BER0LQpbNhgdyIRERGRuFEBXWLNy+u/UegjRsDFi7bGERERERFxS+EFC0LbtuZGjx7gdNobyEYeHjB5spkXPSwMnn0W9uyxO5WIiIhI7KmALnHSrBkULWqK56NG2Z1GRERERMQ9Wf36QerUsHkzfPml3XFslSqV+RM89ZT5HFGzJhw7ZncqERERkdhRAV3ixNMT+vc326NHw99/25tHRERERMQtZcliVs8EMxd6WJi9eWzm7w/ffQdFisCJE6aIfvas3alEREREHkwFdImzRo3g8cfh6lWoUAH+/NPuRCIiIiIibqh7d8iWzQy3HjfO7jS2S58eli+HHDngwAGoU8d8phARERFxZyqgS5x5eMBXX0G+fHD0KDzzDGzfbncqERERERE3kzo1DBpktgcNgnPn7M3jBh57zBTR06eHLVvguefg1i27U4mIiIjcmwro8lBCQuDnn6FUKTh9GipXhnXrbA4lIiIiIuJuWraEkiXh0iUYONDuNG6hcGH4/nsz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tex7NHSo2hHFDhPoRERERJQkdOggG4pmzw48fAiUKyf7hiqK2pEREREREVFs5MoFrFgh16dOBbZvVzWcWGECnYiIiIiSjCJFgIsXgQYNZMlnz55A8+ZAYKDakRERERERUWw0aAD07SvX27UDbt9WNZwYMYFOREREREmKra0s/Zw+HTAyAjZuBEqUAK5dUzsyIiIiIiKKjUmTZEVpQADQqBHw7p3aEX0dE+hERERElOTodECfPsDJk0DGjMCtW0DJksDq1WpHRkREREREMTE2lkIYBwfg778BT0/ttmZkAp2IiIiIkqwyZYBLl4Dq1YH374H27YF//1U7KiIiIiIiiomTE7BhA2BgIH3R9+1TO6LoGakdABERERHRj7C3l8n2L78A5uayMREREREREWlf5crAxIlASAjg4aF2NNFjAp2IiIiIkjxDQ2DkSLWjICIiIiKiuBo4UO0Ivo0tXIiIiIiIiIiIiIiIosEEOhERERERERERERFRNJhAJyIiIiIiIiIiIiKKBhPoRERERERERERERETRYAKdiIiIiIiIiIiIiCgaTKATEREREREREREREUWDCXQiIiIiIiIiIiIiomgwgU5EREREREREREREFA0m0ImIiIiIiIiIiIiIosEEOhERERERERERERFRNJhAJyIiIiIiIiIiIiKKBhPoRERERERERERERETRYAKdiIiIiIiIiIiIiCgaTKATEREREREREREREUWDCXQiIiIiIiIiIiIiomgYqR2A1imKAgAICAhItNfU6/UIDAyEmZkZDAz4HYeWcGy0ieOiTRwXbeK4aBPHRZtiOy5h88SweSNpgxrzeICfZ63iuGgTx0WbOC7axHHRJo6LdsVmbGI7j2cCPQaBgYEAgEyZMqkcCRERERFpWWBgIGxtbdUOg/6P83giIiIiio2Y5vE6haUy36TX6/H06VNYW1tDp9MlymsGBAQgU6ZM+O+//2BjY5Mor0mxw7HRJo6LNnFctInjok0cF22K7bgoioLAwEA4OTmx8khD1JjHA/w8axXHRZs4LtrEcdEmjos2cVy0KzZjE9t5PCvQY2BgYICMGTOq8to2Njb88GkUx0abOC7axHHRJo6LNnFctCk248LKc+1Rcx4P8POsVRwXbeK4aBPHRZs4LtrEcdGumMYmNvN4lsgQEREREREREREREUWDCXQiIiIiIiIi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dnYYM2YMGjZsiPTp0+Pu3bsYOHAgcuTIAXd3dxWjTt48PT2xbt067Ny5E9bW1uH93WxtbWFubg5bW1t07NgRffv2hZ2dHWxsbNCzZ0+ULl0apUqVUjn65Cumcbl79y7WrVuHmjVrIk2aNPj777/Rp08fVKhQAYUKFVI5+uRtyJAh8PDwQObMmREYGIh169bhxIkTOHjwID8vFGucx2sP5/Hawbm8NnEerz2cx2sX5/LalGjzeIU0Z86cOUrmzJkVExMTpWTJksrZs2fVDilFa9q0qeLo6KiYmJgoGTJkUJo2barcuXNH7bBSnOPHjysAolzatm2rKIqi6PV6ZcSIEUq6dOkUU1NTpWrVqsqtW7fUDTqF+NbYvHv3Tqlevbpib2+vGBsbK87Ozkrnzp0VHx8ftcNO1qIbDwDK8uXLw+/z/v17pUePHkrq1KkVCwsLpX79+sqzZ8/UCzoFiGlcHj16pFSoUEGxs7NTTE1NlRw5cigDBgxQ/P391Q08BejQoYPi7OysmJiYKPb29krVqlWVQ4cOhd/OzwvFFufx2sJ5vHZwLq9NnMdrD+fx2sW5vDYl1jxepyiKEreUOxERERERERERERFR8sce6ERERERERERERERE0WACnYiIiIiIiIiIiIgoGkygExERERERERERERFFgwl0IiIiIiIiIiIiIqJoMIFORERERERERERERBQNJtCJiIiIiIiIiIiIiKLBBDoRERERERERERERUTSYQCciIiIiIiIiIiIiigYT6ERElCh0Oh127NihdhhERERERBQHnMcTUUrHBDoRUQrQrl076HS6KJcaNWqoHRoREREREX0F5/FEROozUjsAIiJKHDVq1MDy5csjHTM1NVUpGiIiIiIiig3O44mI1MUKdCKiFMLU1BTp06ePdEmdOjUAWZY5f/58eHh4wNzcHNmyZcOWLVsiPf7q1auoUqUKzM3NkSZNGnTp0gVv376NdJ9ly5Yhf/78MDU1haOjI7y8vCLd7ufnh/r168PCwgI5c+bErl27EvZNExERERElcZzHExGpiwl0IiICAIwYMQINGzbEX3/9hZYtW6JZs2a4efMmACAoKAju7u5InTo1zp8/j82bN+PIkSORJtbz58+Hp6cnunTpgqtXr2LXrl3IkSNHpNcYM2YMmjRpgr///hs1a9ZEy5Yt8erVq0R9n0REREREyQnn8URECUunKIqidhBERJSw2rVrhzVr1sDMzCzS8aFDh2Lo0KHQ6XTo1q0b5s+fH35bqVKlUKxYMfz2229YvHgxBg0ahP/++w+WlpYAgH379qFOnTp4+vQp0qVLhwwZMqB9+/YYP358tDHodDoMHz4c48aNAyCTeSsrK+zfv589HImIiIiIosF5PBGR+tgDnYgohahcuXKkiTUA2NnZhV8vXbp0pNtKly6NK1euAABu3ryJwoULh0+6AaBs2bLQ6/W4desWdDodnj59iqpVq34zhkKFCoVft7S0hI2NDXx9fb/3LRERERERJXucxxMRqYsJdCKiFMLS0jLKUsz4Ym5uHqv7GRsbR/pdp9NBr9cnREhERERERMkC5/FEROpiD3QiIgIAnD17NsrvefPmBQDkzZsXf/31F4KCgsJvP336NAwMDJA7d25YW1sjS5YsOHr0aKLGTERERESU0nEeT0SUsFiBTkSUQoSEhMDHxyfSMSMjI6RNmxYAsHnzZhQvXhzlypXD2rVrce7cOSxduhQA0LJlS4waNQpt27bF6NGj8eLFC/Ts2ROtW7dGunTpAACjR49Gt27d4ODgAA8PDwQGBuL06dPo2bNn4r5RIiIiIqJkhPN4IiJ1MYFORJRCHDhwAI6OjpGO5c6dG//88w8AYMyYMdiwYQN69OgBR0dHrF+/Hvny5QMAWFhY4ODBg+jVqxdKlCgBCwsLNGzYENOnTw9/rrZt2yI4OBgzZsxA//79kTZtWjRq1Cjx3iARERERUTLEeTwRkbp0iqIoagdBRETq0ul02L59O+rVq6d2KEREREREFEucxxMRJTz2QCciIiIiIiIiIiIiigYT6ERERERERERERERE0WALFyIiIiIiIiIiIiKiaLACnYiIiIiIiIiIiIgoGkygExERERERERERERFFgwl0IiIiIiIiIiIiIqJoMIFORERERERERERERBQNJtCJiIiIiIiIiIiIiKLBBDoRERERERERERERUTSYQCciIiIiIiIiIiIiigYT6ERERERERERERERE0WACnYiIiIiIiIiIiIgoGkygExERERERERERERFFgwl0IiIiIiIiIiIiIqJoMIFORERERERERERERBQNJtCJiIiIiIiIiIiIiKLBBDoRUSLJkiUL2rVrp3YYKcqDBw+g0+kwderUBH+tFStWQKfT4cGDB3F+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UGwr6io2RBFFECKELkLoEFoaAQKB1Dm/P7IZjUkgZWbOJPl+rmuuiznzzjn35N24M0/eeV698847atWqlfr371/mOlLZn8Pp06crLGRfTNOmTdWtWzctWrSozPvw5cuXa8eOHeVen8ViKfO+8+DBg1qyZEm58/r5+ZVb9FGRIUOGyMvLS6+88kqZ17NgwQKdPn1a1113XbVfU01de+21kqSXXnqpzPHSb8GWZjl58mS5zwal3/AsbeNy4sSJMo+7ubnZvrX821YvvzdgwABdddVVeu2112yfp37v99eu7mfQJUuW2PZikqT169dr3bp1Ve7TD8A+WIEOoE5auHBhhX3ppk2bpueee07ff/+9+vbtq0mTJik2NlbZ2dnatGmTvv32W2VnZ0sqWTHw8ccf68Ybb9R1112nAwcOaN68eYqNja2waGmWiIgITZs2TbNnz9bw4cM1dOhQbd26VV999ZVCQ0Nrtcp73Lhxevzxx/X8888rISFB/fv3V1BQkMaOHat7771XFotFb7/9doUF6Z49e2rx4sWaPn26evfurcaNG+v666/XHXfcoQ8++EB33323vv/+ew0YMEDFxcVKSUnRBx98oK+//lq9evWqMM+5c+fUv39/XXrppRo6dKiioqJ06tQpLVmyRKtXr1ZCQoK6d+8uSRozZozeeustTZ8+XevXr9egQYOUm5urb7/9Vvfcc49uuOGGav0sEhMTNXDgQHXt2lWTJk1S69atlZ6erqSkJB05ckRbt26VJD300EN6++23NXToUE2bNk1+fn567bXXFBMTo23btpU555133qm7775bN910k6666ipt3bpVX3/9tUJDQy+Yxc3NTa+//rquueYade7cWePHj1fz5s119OhRff/99woICNDnn39erdcHAADgTNV5X2mWJ598Ut98840GDBigyZMnq7i4WHPnzlWXLl20ZcuWKp/n9ttv11133aVjx47p0UcfLfPY1VdfbVvd/Kc//Ulnz57V/PnzFR4eftFvJVZk1qxZuu666zRw4EBNmDBB2dnZ+uc//6nOnTuX+Qxz3XXXac6cORo6dKhuvfVWZWRkKDExUW3bti33nrVnz5769ttvNWfOHDVr1kytWrVS3759y107LCxMM2fO1FNPPaWhQ4dq+PDh2rVrl1599VX17t27zIah9rB3714988wz5Y53795d1113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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Training Statistics:\n","Final train loss: 0.127531\n","Final val loss: 0.132986\n","Best val loss: 0.132986 at epoch 30\n","Final learning rate: 1.00e-04\n"]}]},{"cell_type":"code","source":["def destandardize_distance_matrix(normalized_matrix, global_mean, global_std):\n","    return normalized_matrix * global_std + global_mean\n","\n","def distance_matrix_to_3d_coordinates(distance_matrix, random_state=42):\n","    # 3D reconstruction using MDS\n","    mds = MDS(n_components=3, dissimilarity='precomputed', random_state=random_state, max_iter=1000)\n","    coordinates = mds.fit_transform(distance_matrix)\n","    return coordinates\n","\n","def align_coordinates(coords1, coords2):\n","    \"\"\"\n","    Use Procrustes analysis to align the two coordinate sets\n","    This allows for better comparison of true and predicted coordinates\n","    \"\"\"\n","    from scipy.spatial import procrustes\n","\n","    mtx1, mtx2, disparity = procrustes(coords1, coords2)\n","\n","    return mtx1, mtx2\n","\n","def calculate_coordinate_metrics(true_coords, pred_coords):\n","    \"\"\"\n","    Calculate various evaluation indicators of 3D coordinates\n","    \"\"\"\n","\n","    aligned_true, aligned_pred = align_coordinates(true_coords, pred_coords)\n","    rmsd = np.sqrt(np.mean(np.sum((aligned_true - aligned_pred)**2, axis=1)))\n","    mae = np.mean(np.sqrt(np.sum((aligned_true - aligned_pred)**2, axis=1)))\n","    max_error = np.max(np.sqrt(np.sum((aligned_true - aligned_pred)**2, axis=1)))\n","\n","    return {\n","        'rmsd': rmsd,\n","        'mae': mae,\n","        'max_error': max_error,\n","        'aligned_true': aligned_true,\n","        'aligned_pred': aligned_pred\n","    }\n","\n","def plot_3d_comparison(true_coords, pred_coords, title_suffix=\"\"):\n","    fig = plt.figure(figsize=(16, 6))\n","\n","    metrics = calculate_coordinate_metrics(true_coords, pred_coords)\n","    aligned_true = metrics['aligned_true']\n","    aligned_pred = metrics['aligned_pred']\n","\n","    ax1 = fig.add_subplot(131, projection='3d')\n","    scatter1 = ax1.scatter(aligned_true[:, 0], aligned_true[:, 1], aligned_true[:, 2],\n","                          c=range(len(aligned_true)), cmap='viridis', s=50, alpha=0.8)\n","\n","    for i in range(len(aligned_true)-1):\n","        ax1.plot([aligned_true[i, 0], aligned_true[i+1, 0]],\n","                [aligned_true[i, 1], aligned_true[i+1, 1]],\n","                [aligned_true[i, 2], aligned_true[i+1, 2]], 'k-', alpha=0.3, linewidth=0.5)\n","\n","    ax1.set_title(f'True 3D Structure {title_suffix}')\n","    ax1.set_xlabel('X (Å)')\n","    ax1.set_ylabel('Y (Å)')\n","    ax1.set_zlabel('Z (Å)')\n","\n","    ax2 = fig.add_subplot(132, projection='3d')\n","    scatter2 = ax2.scatter(aligned_pred[:, 0], aligned_pred[:, 1], aligned_pred[:, 2],\n","                          c=range(len(aligned_pred)), cmap='viridis', s=50, alpha=0.8)\n","\n","    for i in range(len(aligned_pred)-1):\n","        ax2.plot([aligned_pred[i, 0], aligned_pred[i+1, 0]],\n","                [aligned_pred[i, 1], aligned_pred[i+1, 1]],\n","                [aligned_pred[i, 2], aligned_pred[i+1, 2]], 'k-', alpha=0.3, linewidth=0.5)\n","\n","    ax2.set_title(f'Predicted 3D Structure {title_suffix}')\n","    ax2.set_xlabel('X (Å)')\n","    ax2.set_ylabel('Y (Å)')\n","    ax2.set_zlabel('Z (Å)')\n","\n","    # Overlay comparison chart\n","    ax3 = fig.add_subplot(133, projection='3d')\n","    ax3.scatter(aligned_true[:, 0], aligned_true[:, 1], aligned_true[:, 2],\n","               c='blue', s=50, alpha=0.6, label='True')\n","    ax3.scatter(aligned_pred[:, 0], aligned_pred[:, 1], aligned_pred[:, 2],\n","               c='red', s=50, alpha=0.6, label='Predicted')\n","\n","    # Connect corresponding points to show differences\n","    for i in range(len(aligned_true)):\n","        ax3.plot([aligned_true[i, 0], aligned_pred[i, 0]],\n","                [aligned_true[i, 1], aligned_pred[i, 1]],\n","                [aligned_true[i, 2], aligned_pred[i, 2]], 'gray', alpha=0.3, linewidth=0.5)\n","\n","    ax3.set_title(f'Overlay Comparison {title_suffix}')\n","    ax3.set_xlabel('X (Å)')\n","    ax3.set_ylabel('Y (Å)')\n","    ax3.set_zlabel('Z (Å)')\n","    ax3.legend()\n","\n","    plt.tight_layout()\n","    plt.show()\n","\n","    return metrics\n","\n","def plot_sample_predictions_with_3d(model, test_loader, device, global_stats, num_samples=3):\n","    \"\"\"增强版可视化函数，包含3D坐标重建和对比\"\"\"\n","    model.eval()\n","\n","    with torch.no_grad():\n","        for batch_idx, batch in enumerate(test_loader):\n","            if batch_idx >= num_samples:\n","                break\n","\n","            input_seqs = batch['input_seqs'].to(device)\n","            target_matrices = batch['distance_matrix'].to(device)\n","            src_padding_mask = batch['src_key_padding_mask'].to(device)\n","            matrix_mask = batch['matrix_mask'].to(device)\n","\n","            # predict with model\n","            pred_matrices = model(\n","                input_seqs=input_seqs,\n","                src_key_padding_mask=src_padding_mask,\n","                matrix_mask=matrix_mask\n","            )\n","\n","            # only chose first sample\n","            sample_idx = 0\n","            seq_len = (~src_padding_mask[sample_idx]).sum().item()\n","\n","            # destandardize\n","            pred_orig = destandardize_distance_matrix(\n","                pred_matrices[sample_idx, :seq_len, :seq_len].cpu().numpy(),\n","                global_stats['train_mean'], global_stats['train_std']\n","            )\n","            target_orig = destandardize_distance_matrix(\n","                target_matrices[sample_idx, :seq_len, :seq_len].cpu().numpy(),\n","                global_stats['train_mean'], global_stats['train_std']\n","            )\n","\n","            print(f\"\\n{'='*60}\")\n","            print(f\"SAMPLE {batch_idx+1} ANALYSIS\")\n","            print(f\"{'='*60}\")\n","\n","            # 1. plot distance matrix comparison chart\n","            fig, axes = plt.subplots(1, 3, figsize=(18, 5))\n","\n","            im1 = axes[0].imshow(target_orig, cmap='viridis')\n","            axes[0].set_title(f'True Distance Matrix (Sample)')\n","            axes[0].set_xlabel('Residue Index')\n","            axes[0].set_ylabel('Residue Index')\n","            plt.colorbar(im1, ax=axes[0])\n","\n","            im2 = axes[1].imshow(pred_orig, cmap='viridis')\n","            axes[1].set_title(f'Predicted Distance Matrix (Sample)')\n","            axes[1].set_xlabel('Residue Index')\n","            axes[1].set_ylabel('Residue Index')\n","            plt.colorbar(im2, ax=axes[1])\n","\n","            diff = np.abs(pred_orig - target_orig)\n","            im3 = axes[2].imshow(diff, cmap='Reds')\n","            axes[2].set_title(f'Absolute Difference (Sample {batch_idx+1})')\n","            axes[2].set_xlabel('Residue Index')\n","            axes[2].set_ylabel('Residue Index')\n","            plt.colorbar(im3, ax=axes[2])\n","\n","            plt.tight_layout()\n","            plt.show()\n","\n","            print(f\"\\nDistance Matrix Statistics:\")\n","            print(f\"Sequence length: {seq_len}\")\n","            print(f\"Mean absolute error: {diff.mean():.3f} Å\")\n","            print(f\"Max absolute error: {diff.max():.3f} Å\")\n","            print(f\"RMSE: {np.sqrt(np.mean(diff**2)):.3f} Å\")\n","\n","            # 2. Reconstructing 3D coordinates\n","            print(f\"\\nReconstructing 3D coordinates...\")\n","            try:\n","                true_coords_3d = distance_matrix_to_3d_coordinates(target_orig)\n","                pred_coords_3d = distance_matrix_to_3d_coordinates(pred_orig)\n","\n","                coord_metrics = calculate_coordinate_metrics(true_coords_3d, pred_coords_3d)\n","\n","                print(f\"\\n3D Coordinate Metrics:\")\n","                print(f\"RMSD (after alignment): {coord_metrics['rmsd']:.3f} Å\")\n","                print(f\"Mean distance error: {coord_metrics['mae']:.3f} Å\")\n","                print(f\"Max distance error: {coord_metrics['max_error']:.3f} Å\")\n","\n","                print(f\"\\nPlotting 3D structures...\")\n","                plot_3d_comparison(true_coords_3d, pred_coords_3d, f\"(Sample)\")\n","\n","                residue_errors = np.sqrt(np.sum((coord_metrics['aligned_true'] - coord_metrics['aligned_pred'])**2, axis=1))\n","\n","                plt.figure(figsize=(12, 4))\n","\n","                plt.subplot(1, 2, 1)\n","                plt.plot(residue_errors, 'o-', alpha=0.7)\n","                plt.title(f'Per-Residue Coordinate Error (Sample)')\n","                plt.xlabel('Residue Index')\n","                plt.ylabel('Coordinate Error (Å)')\n","                plt.grid(True, alpha=0.3)\n","\n","                plt.subplot(1, 2, 2)\n","                plt.hist(residue_errors, bins=20, alpha=0.7, color='skyblue', edgecolor='black')\n","                plt.title(f'Error Distribution (Sample)')\n","                plt.xlabel('Coordinate Error (Å)')\n","                plt.ylabel('Frequency')\n","                plt.grid(True, alpha=0.3)\n","\n","                plt.tight_layout()\n","                plt.show()\n","\n","            except Exception as e:\n","                print(f\"Error in 3D reconstruction: {str(e)}\")\n","                print(\"This might happen if the distance matrix is not valid for 3D embedding.\")\n","\n","            print(f\"{'='*60}\")\n","\n","\n","# ------------------------- Main Visualization-------------------------\n","def run_enhanced_visualization():\n","\n","    # Load model\n","    checkpoint = torch.load(\"/content/drive/MyDrive/ProteinTrainResults/best_model.pth\", map_location=device)\n","    model = ProteinDistancePredictor(\n","        embedding_dim=128,\n","        num_heads=8,\n","        num_layers=6,\n","        ff_dim=512,\n","        decoder_hidden_dim=256,\n","        dropout=0.1,\n","        max_len=1024\n","    ).to(device)\n","    model.load_state_dict(checkpoint[\"model_state_dict\"])\n","\n","    plot_sample_predictions_with_3d(\n","        model=model,\n","        test_loader=test_loader,\n","        device=device,\n","        global_stats=global_stats,\n","        num_samples=3,\n","    )\n","\n","run_enhanced_visualization()"],"metadata":{"id":"PgM2B6Eq2Ujk","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1p4D6_hHQCt6AIDbAu7a4SR8TbEh7moo3"},"executionInfo":{"status":"ok","timestamp":1748014281426,"user_tz":-120,"elapsed":21418,"user":{"displayName":"Youliang","userId":"05608918674526622561"}},"outputId":"35f20156-5235-414c-f934-b4ae37a63ffa"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]}]}